{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AeroGameFramework \u00b6 About \u00b6 AeroGameFramework is a Roblox game framework that makes development easy and fun. The framework is designed to simplify the communication between modules and seamlessly bridge the gap between the server and client. Never again will you have to touch RemoteFunctions or RemoteEvents. Learning \u00b6 This is the main documentation page for AGF and is the single point of information for using the framework. There is also a YouTube tutorial series available. Collaborate \u00b6 AeroGameFramework is an open-source project, and your support is much appreciated. Feel free to report bugs, suggest features, and make pull requests. Please visit the GitHub repository for more information. Join the public AeroGameFramework Discord server to participate in discussions about the framework. The framework was built and is supported primary by Stephen Leitnick . Support \u00b6 Support AGF by buying me a coffee and keeping me energized to keep up the work on this project! Any support is very much appreciated. Example \u00b6 Here is an example of a client-side controller invoking a server-side service to respawn the player. Notice that no remote objects have to be explicitly referenced: 1 2 3 4 5 6 7 8 9 10 11 -- Client: local MyController = {} function MyController : Start () local didRespawn = self . Services . MyService : Respawn () if ( didRespawn ) then ... end end return MyController 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 -- Server: local MyService = { Client = {}} function MyService . Client : Respawn ( player ) local humanoid = player . Character and player . Character : FindFirstChild ( \"Humanoid\" ) -- Only allow respawning if the player is dead: if (( not humanoid ) or humanoid . Health == 0 ) then player : LoadCharacter () return true end return false end return MyService These are complete code examples. They could be put into the framework and work as-is.","title":"Home"},{"location":"#aerogameframework","text":"","title":"AeroGameFramework"},{"location":"#about","text":"AeroGameFramework is a Roblox game framework that makes development easy and fun. The framework is designed to simplify the communication between modules and seamlessly bridge the gap between the server and client. Never again will you have to touch RemoteFunctions or RemoteEvents.","title":"About"},{"location":"#learning","text":"This is the main documentation page for AGF and is the single point of information for using the framework. There is also a YouTube tutorial series available.","title":"Learning"},{"location":"#collaborate","text":"AeroGameFramework is an open-source project, and your support is much appreciated. Feel free to report bugs, suggest features, and make pull requests. Please visit the GitHub repository for more information. Join the public AeroGameFramework Discord server to participate in discussions about the framework. The framework was built and is supported primary by Stephen Leitnick .","title":"Collaborate"},{"location":"#support","text":"Support AGF by buying me a coffee and keeping me energized to keep up the work on this project! Any support is very much appreciated.","title":"Support"},{"location":"#example","text":"Here is an example of a client-side controller invoking a server-side service to respawn the player. Notice that no remote objects have to be explicitly referenced: 1 2 3 4 5 6 7 8 9 10 11 -- Client: local MyController = {} function MyController : Start () local didRespawn = self . Services . MyService : Respawn () if ( didRespawn ) then ... end end return MyController 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 -- Server: local MyService = { Client = {}} function MyService . Client : Respawn ( player ) local humanoid = player . Character and player . Character : FindFirstChild ( \"Humanoid\" ) -- Only allow respawning if the player is dead: if (( not humanoid ) or humanoid . Health == 0 ) then player : LoadCharacter () return true end return false end return MyService These are complete code examples. They could be put into the framework and work as-is.","title":"Example"},{"location":"controllers/","text":"Controllers \u00b6 A service is a singleton initiated at runtime on the server. Services should serve specific purposes. For instance, the provided DataService allows simplified data management. You might also create a WeaponService, which might be used for holding and figuring out weapon information for the players. A controller is a singleton initiated at runtime on the client. Controllers should serve a specific purpose. For instance, the provided Fade controller allows for control of simple screen fading. Controllers often interact with server-side services as well. Another example of a controller could be a Camera controller, which has the task of specifically controlling the player's camera. API \u00b6 A controller in its simplest form looks like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 local MyController = {} function MyController : Start () -- Called after all controllers have been initialized -- Called asynchronously from other controllers -- Safe to call any other framework modules end function MyController : Init () -- Called after all modules have been \"required\" but before 'Start()' has been called on any of them -- Safe to reference 'self.Services/Controllers/Modules/Shared' -- NOT safe to USE/CALL other services yet (use them in/after Start method) -- Register all events here (but only connect to events in Start) end return MyController Injected Properties \u00b6 Property Description controller.Controllers Table of all other controllers, referenced by the name of the ModuleScript controller.Modules Table of all modules, referenced by the name of the ModuleScript controller.Shared Table of all shared modules, referenced by the name of the ModuleScript controller.Services Table of all server-side services, referenced by the name of the ModuleScript controller.Player Reference to the LocalPlayer ( game.Players.LocalPlayer ) Injected Methods \u00b6 Returns Method void controller:RegisterEvent(String eventName) void controller:FireEvent(String eventName, ...) void controller:ConnectEvent(String eventName, Function handler) Table controller:WrapModule(Table tbl) controller:Init() \u00b6 The Init method is called on each controller in the framework in a synchronous and linear progression. In other words, each controller's Init method is invoked one after the other. Each Init method must fully execute before moving onto the next. This is essentially the constructor for the controller singleton. The method should be used to set up your controller. For instance, you might want to create events or reference other controllers. Use the Init method to register events and initialize any necessary components before the Start method is invoked. Warning The Init method should not invoke any methods from other controllers yet, because it is not guaranteed that those controllers have had their Init methods invoked yet. It is safe to reference other controllers, but not to invoke their methods. controller:Start() \u00b6 The Start method is called after all controllers have been initialized (i.e. their Init methods have been fully executed). Each Start method is executed on a separate thread (asynchronously). From here, it is safe to reference and invoke other controllers in the framework. Custom Methods \u00b6 Adding your own methods to a controller is very easy. Simply attach a function to the controller table: 1 2 3 4 5 6 7 8 9 -- Custom method: function MyController : PrintSomething (...) print ( \"MyController:\" , ...) end function MyController : Start () -- Invoke the custom method: self : PrintSomething ( \"Hi\" , \"Hello\" , 32 , true , \"ABC\" ) end Other controllers can also invoke your custom method: 1 2 3 function AnotherController : Start () self . Services . MyService : PrintSomething ( \"Hello\" , false , 64 ) end Events \u00b6 You can create and listen to events using the RegisterEvent , ConnectEvent , and FireEvent methods. All events should always be registered within the Init method. The ConnectEvent and FireEvent methods should never be used within an Init method. 1 2 3 4 5 6 7 8 9 10 11 12 13 function MyController : Start () -- Connect to 'Hello' event: self : ConnectEvent ( \"Hello\" , function ( msg ) print ( msg ) end ) -- Fire 'Hello' event: self : FireEvent ( \"Hello\" , \"Hello world!\" ) end function MyController : Init () -- Register 'Hello' event: self : RegisterEvent ( \"Hello\" ) end Alternatively, the Event object is available under Shared: 1 2 3 4 5 6 7 8 9 10 11 12 13 function MyController : Start () -- Connect to 'Hello' event: self . Hello : Connect ( function ( msg ) print ( msg ) end ) -- Fire 'Hello' event: self . Hello : Fire ( \"Hello world!\" ) end function MyController : Init () -- Create 'Hello' event: self . Hello = self . Shared . Signal . new () end WrapModule \u00b6 The WrapModule method can be used to transform a table into a framework-like module. In other words, it sets the table's metatable to the same metatable used by other framework modules, thus exposing the framework to the given table. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 function MyController : Start () local thisThing = {} function thisThing : Start () print ( \"thisThing started\" ) end function thisThing : Init () print ( \"thisThing initialized\" ) end -- Transform 'thisThing' into a framework object: self : WrapModule ( thisThing ) -- Another example where an external module is loaded: local anotherThing = require ( someModule ) self : WrapModule ( anotherThing ) -- Wrapping and requiring an external module in one line: local otherModuleWrapped = self : WrapModule ( require ( otherModule )) end Tip This can be useful if you are requiring other non-framework modules in which you want to expose the framework. Forcing Init Order \u00b6 By using the Order setting, the Init execution order can be defined. By default, the order of execution is undetermined. For instance, you have services called MyController and AnotherController , you could have MyController.settings and AnotherController.settings modules with the following configuration: 1 2 3 4 -- MyController.settings return { Order = 1 ; } 1 2 3 4 -- AnotherController.settings return { Order = 2 ; } With this configuration, it is guaranteed that MyController will have Init invoked before AnotherController . Other Examples \u00b6 Invoking another controller \u00b6 1 2 3 4 5 6 7 function MyController : Start () local fade = self . Controllers . Fade fade : SetText ( \"Fade Example\" ) fade : Out () wait ( 1 ) fade : In () end Invoking a service \u00b6 1 2 3 4 5 6 function MyController : Start () -- Get pints: local pointsService = self . Services . PointsService local points = pointsService : GetPoints () print ( \"Points:\" , points ) end Using a module \u00b6 1 2 3 4 function MyController : Start () local someModule = self . Modules . SomeModule someModule : DoSomething () end Using a shared module \u00b6 1 2 3 4 5 6 function MyController : Start () -- Print the current date: local Date = self . Shared . Date local now = Date . new () print ( \"Now\" , now ) end Connecting to a service event \u00b6 1 2 3 4 5 6 function MyController : Start () local dataService = self . Services . DataService dataService . Failed : Connect ( function ( method , key , errorMessage ) warn ( \"DataService failed:\" , method , key , errorMessage ) end ) end Firing a service event \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 -- Client controller: function MyController : Start () self . Services . CustomService . Hello : Fire ( \"Hello from the client\" ) end --------------------------------------------------------------------- -- Server service: function CustomService : Start () self : ConnectClientEvent ( \"Hello\" , function ( player , msg ) print ( player . Name .. \" says: \" .. msg ) end ) end function CustomService : Init () self : RegisterClientEvent ( \"Hello\" ) end No Server-to-Client Methods \u00b6 As you may have noticed, there is no way to create a method on a controller that a server-side service can invoke. This is by design. There are a lot of dangers in allowing the server to invoke client-side methods, and thus the framework simply does not supply a way of doing so. Internally, this would be allowed via remoteFunction:InvokeClient(...) . If the server needs information from a client, a client controller should fire a service event. For more information, please read the \"Note\" and \"Warning\" section under the RemoteFunction:InvokeClient() documentation page and this YouTube video discussing the issue in more detail.","title":"Controllers"},{"location":"controllers/#controllers","text":"A service is a singleton initiated at runtime on the server. Services should serve specific purposes. For instance, the provided DataService allows simplified data management. You might also create a WeaponService, which might be used for holding and figuring out weapon information for the players. A controller is a singleton initiated at runtime on the client. Controllers should serve a specific purpose. For instance, the provided Fade controller allows for control of simple screen fading. Controllers often interact with server-side services as well. Another example of a controller could be a Camera controller, which has the task of specifically controlling the player's camera.","title":"Controllers"},{"location":"controllers/#api","text":"A controller in its simplest form looks like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 local MyController = {} function MyController : Start () -- Called after all controllers have been initialized -- Called asynchronously from other controllers -- Safe to call any other framework modules end function MyController : Init () -- Called after all modules have been \"required\" but before 'Start()' has been called on any of them -- Safe to reference 'self.Services/Controllers/Modules/Shared' -- NOT safe to USE/CALL other services yet (use them in/after Start method) -- Register all events here (but only connect to events in Start) end return MyController","title":"API"},{"location":"controllers/#injected-properties","text":"Property Description controller.Controllers Table of all other controllers, referenced by the name of the ModuleScript controller.Modules Table of all modules, referenced by the name of the ModuleScript controller.Shared Table of all shared modules, referenced by the name of the ModuleScript controller.Services Table of all server-side services, referenced by the name of the ModuleScript controller.Player Reference to the LocalPlayer ( game.Players.LocalPlayer )","title":"Injected Properties"},{"location":"controllers/#injected-methods","text":"Returns Method void controller:RegisterEvent(String eventName) void controller:FireEvent(String eventName, ...) void controller:ConnectEvent(String eventName, Function handler) Table controller:WrapModule(Table tbl)","title":"Injected Methods"},{"location":"controllers/#controllerinit","text":"The Init method is called on each controller in the framework in a synchronous and linear progression. In other words, each controller's Init method is invoked one after the other. Each Init method must fully execute before moving onto the next. This is essentially the constructor for the controller singleton. The method should be used to set up your controller. For instance, you might want to create events or reference other controllers. Use the Init method to register events and initialize any necessary components before the Start method is invoked. Warning The Init method should not invoke any methods from other controllers yet, because it is not guaranteed that those controllers have had their Init methods invoked yet. It is safe to reference other controllers, but not to invoke their methods.","title":"controller:Init()"},{"location":"controllers/#controllerstart","text":"The Start method is called after all controllers have been initialized (i.e. their Init methods have been fully executed). Each Start method is executed on a separate thread (asynchronously). From here, it is safe to reference and invoke other controllers in the framework.","title":"controller:Start()"},{"location":"controllers/#custom-methods","text":"Adding your own methods to a controller is very easy. Simply attach a function to the controller table: 1 2 3 4 5 6 7 8 9 -- Custom method: function MyController : PrintSomething (...) print ( \"MyController:\" , ...) end function MyController : Start () -- Invoke the custom method: self : PrintSomething ( \"Hi\" , \"Hello\" , 32 , true , \"ABC\" ) end Other controllers can also invoke your custom method: 1 2 3 function AnotherController : Start () self . Services . MyService : PrintSomething ( \"Hello\" , false , 64 ) end","title":"Custom Methods"},{"location":"controllers/#events","text":"You can create and listen to events using the RegisterEvent , ConnectEvent , and FireEvent methods. All events should always be registered within the Init method. The ConnectEvent and FireEvent methods should never be used within an Init method. 1 2 3 4 5 6 7 8 9 10 11 12 13 function MyController : Start () -- Connect to 'Hello' event: self : ConnectEvent ( \"Hello\" , function ( msg ) print ( msg ) end ) -- Fire 'Hello' event: self : FireEvent ( \"Hello\" , \"Hello world!\" ) end function MyController : Init () -- Register 'Hello' event: self : RegisterEvent ( \"Hello\" ) end Alternatively, the Event object is available under Shared: 1 2 3 4 5 6 7 8 9 10 11 12 13 function MyController : Start () -- Connect to 'Hello' event: self . Hello : Connect ( function ( msg ) print ( msg ) end ) -- Fire 'Hello' event: self . Hello : Fire ( \"Hello world!\" ) end function MyController : Init () -- Create 'Hello' event: self . Hello = self . Shared . Signal . new () end","title":"Events"},{"location":"controllers/#wrapmodule","text":"The WrapModule method can be used to transform a table into a framework-like module. In other words, it sets the table's metatable to the same metatable used by other framework modules, thus exposing the framework to the given table. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 function MyController : Start () local thisThing = {} function thisThing : Start () print ( \"thisThing started\" ) end function thisThing : Init () print ( \"thisThing initialized\" ) end -- Transform 'thisThing' into a framework object: self : WrapModule ( thisThing ) -- Another example where an external module is loaded: local anotherThing = require ( someModule ) self : WrapModule ( anotherThing ) -- Wrapping and requiring an external module in one line: local otherModuleWrapped = self : WrapModule ( require ( otherModule )) end Tip This can be useful if you are requiring other non-framework modules in which you want to expose the framework.","title":"WrapModule"},{"location":"controllers/#forcing-init-order","text":"By using the Order setting, the Init execution order can be defined. By default, the order of execution is undetermined. For instance, you have services called MyController and AnotherController , you could have MyController.settings and AnotherController.settings modules with the following configuration: 1 2 3 4 -- MyController.settings return { Order = 1 ; } 1 2 3 4 -- AnotherController.settings return { Order = 2 ; } With this configuration, it is guaranteed that MyController will have Init invoked before AnotherController .","title":"Forcing Init Order"},{"location":"controllers/#other-examples","text":"","title":"Other Examples"},{"location":"controllers/#invoking-another-controller","text":"1 2 3 4 5 6 7 function MyController : Start () local fade = self . Controllers . Fade fade : SetText ( \"Fade Example\" ) fade : Out () wait ( 1 ) fade : In () end","title":"Invoking another controller"},{"location":"controllers/#invoking-a-service","text":"1 2 3 4 5 6 function MyController : Start () -- Get pints: local pointsService = self . Services . PointsService local points = pointsService : GetPoints () print ( \"Points:\" , points ) end","title":"Invoking a service"},{"location":"controllers/#using-a-module","text":"1 2 3 4 function MyController : Start () local someModule = self . Modules . SomeModule someModule : DoSomething () end","title":"Using a module"},{"location":"controllers/#using-a-shared-module","text":"1 2 3 4 5 6 function MyController : Start () -- Print the current date: local Date = self . Shared . Date local now = Date . new () print ( \"Now\" , now ) end","title":"Using a shared module"},{"location":"controllers/#connecting-to-a-service-event","text":"1 2 3 4 5 6 function MyController : Start () local dataService = self . Services . DataService dataService . Failed : Connect ( function ( method , key , errorMessage ) warn ( \"DataService failed:\" , method , key , errorMessage ) end ) end","title":"Connecting to a service event"},{"location":"controllers/#firing-a-service-event","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 -- Client controller: function MyController : Start () self . Services . CustomService . Hello : Fire ( \"Hello from the client\" ) end --------------------------------------------------------------------- -- Server service: function CustomService : Start () self : ConnectClientEvent ( \"Hello\" , function ( player , msg ) print ( player . Name .. \" says: \" .. msg ) end ) end function CustomService : Init () self : RegisterClientEvent ( \"Hello\" ) end","title":"Firing a service event"},{"location":"controllers/#no-server-to-client-methods","text":"As you may have noticed, there is no way to create a method on a controller that a server-side service can invoke. This is by design. There are a lot of dangers in allowing the server to invoke client-side methods, and thus the framework simply does not supply a way of doing so. Internally, this would be allowed via remoteFunction:InvokeClient(...) . If the server needs information from a client, a client controller should fire a service event. For more information, please read the \"Note\" and \"Warning\" section under the RemoteFunction:InvokeClient() documentation page and this YouTube video discussing the issue in more detail.","title":"No Server-to-Client Methods"},{"location":"execution_model/","text":"Execution Model \u00b6 Services and Controllers \u00b6 Services and Controllers act as singletons. In other words, only one instance exists per service or controller in a given environment. All modules are loaded using require() at the start of runtime. All modules have properties and methods exposed via metamethods. Each Init method on the modules are invoked one-by-one synchronously. Each Start method on the modules are invoked asynchronously. The module remains in memory for the remainder of runtime. Modules and Shared \u00b6 A module (in Modules or Shared) is loaded using require() the first time it is referenced (e.g. lazy-loaded). The module has properties and methods exposed via metatable (using WrapTable ) The module's Init method is invoked synchronously. The module's Start method is invoked immediately and asynchronously after the Init method is completed. Forcing Init Order \u00b6 The order of which Init is invoked for services and controllers can be explicitly set. This is done through the Order setting. For more info, see the Settings section. Preventing Init or Start \u00b6 There might be times where it is not desired for the framework to invoke either the Start or the Init method on a module, service, or controller. In such an instance, a flag can be added to indicate that the method should not be invoked by the framework. Use the PreventInit and PreventStart settings to skip over Start or Init . For more info, see the Settings section. External Use \u00b6 It is possible (but not recommended) to use AGF outside of the framework environment. In other words, a script within the workspace can access modules within the framework. This is useful if an existing script or system cannot be included into the framework, but needs to access items within the framework. In order to do this the _G.Aero global is exposed on both the server and the client. Accessing _G.Aero from the server will allow access to server-side services and modules, as well as shared modules. Accessing _G.Aero from the client will allow access to client-side controllers and modules, as well as shared modules. Wait for External Aero \u00b6 Because _G.Aero is not assigned until the framework has fully initialized, external scripts must first check and wait for the global to be assigned before attempting to use it: 1 2 while ( not _G . Aero ) do wait () end local aero = _G . Aero Use External Aero from Server \u00b6 Once aero is referenced, it can be used the same way you would use self within a controller or service. For example, using _G.Aero from the server: 1 2 3 4 5 while ( not _G . Aero ) do wait () end local aero = _G . Aero aero . Services . MyService : Hello () local maid = aero . Shared . Maid . new () Use External Aero from Client \u00b6 Using aero from the client is the same as the server, except access will be granted to client-side modules: 1 2 3 4 5 while ( not _G . Aero ) do wait () end local aero = _G . Aero aero . Controllers . Fade : Out () local date = aero . Shared . Date . new () Warning Using AGF externally using _G.Aero is considered bad practice. The global is only provided so that edge-cases can be filled where it is not possible to include a script or system into the framework. Notes and Best Practices \u00b6 The Init and Start methods are always optional, but it is good practice to always include them. The Init method should be used to set up the individual module and register events. The Init method should try to do as minimal work as possible, as other modules are blocked until it is completed. The Init method should not be used to invoke methods from other modules in the framework (that should be done in or after Start ) Events must be registered in the Init method. Events should never be connected or fired within the Init method. Do this within the Start method. Because Modules and Shared modules are lazy-loaded, their Init methods are invoked the first time they are referenced.","title":"Execution Model"},{"location":"execution_model/#execution-model","text":"","title":"Execution Model"},{"location":"execution_model/#services-and-controllers","text":"Services and Controllers act as singletons. In other words, only one instance exists per service or controller in a given environment. All modules are loaded using require() at the start of runtime. All modules have properties and methods exposed via metamethods. Each Init method on the modules are invoked one-by-one synchronously. Each Start method on the modules are invoked asynchronously. The module remains in memory for the remainder of runtime.","title":"Services and Controllers"},{"location":"execution_model/#modules-and-shared","text":"A module (in Modules or Shared) is loaded using require() the first time it is referenced (e.g. lazy-loaded). The module has properties and methods exposed via metatable (using WrapTable ) The module's Init method is invoked synchronously. The module's Start method is invoked immediately and asynchronously after the Init method is completed.","title":"Modules and Shared"},{"location":"execution_model/#forcing-init-order","text":"The order of which Init is invoked for services and controllers can be explicitly set. This is done through the Order setting. For more info, see the Settings section.","title":"Forcing Init Order"},{"location":"execution_model/#preventing-init-or-start","text":"There might be times where it is not desired for the framework to invoke either the Start or the Init method on a module, service, or controller. In such an instance, a flag can be added to indicate that the method should not be invoked by the framework. Use the PreventInit and PreventStart settings to skip over Start or Init . For more info, see the Settings section.","title":"Preventing Init or Start"},{"location":"execution_model/#external-use","text":"It is possible (but not recommended) to use AGF outside of the framework environment. In other words, a script within the workspace can access modules within the framework. This is useful if an existing script or system cannot be included into the framework, but needs to access items within the framework. In order to do this the _G.Aero global is exposed on both the server and the client. Accessing _G.Aero from the server will allow access to server-side services and modules, as well as shared modules. Accessing _G.Aero from the client will allow access to client-side controllers and modules, as well as shared modules.","title":"External Use"},{"location":"execution_model/#wait-for-external-aero","text":"Because _G.Aero is not assigned until the framework has fully initialized, external scripts must first check and wait for the global to be assigned before attempting to use it: 1 2 while ( not _G . Aero ) do wait () end local aero = _G . Aero","title":"Wait for External Aero"},{"location":"execution_model/#use-external-aero-from-server","text":"Once aero is referenced, it can be used the same way you would use self within a controller or service. For example, using _G.Aero from the server: 1 2 3 4 5 while ( not _G . Aero ) do wait () end local aero = _G . Aero aero . Services . MyService : Hello () local maid = aero . Shared . Maid . new ()","title":"Use External Aero from Server"},{"location":"execution_model/#use-external-aero-from-client","text":"Using aero from the client is the same as the server, except access will be granted to client-side modules: 1 2 3 4 5 while ( not _G . Aero ) do wait () end local aero = _G . Aero aero . Controllers . Fade : Out () local date = aero . Shared . Date . new () Warning Using AGF externally using _G.Aero is considered bad practice. The global is only provided so that edge-cases can be filled where it is not possible to include a script or system into the framework.","title":"Use External Aero from Client"},{"location":"execution_model/#notes-and-best-practices","text":"The Init and Start methods are always optional, but it is good practice to always include them. The Init method should be used to set up the individual module and register events. The Init method should try to do as minimal work as possible, as other modules are blocked until it is completed. The Init method should not be used to invoke methods from other modules in the framework (that should be done in or after Start ) Events must be registered in the Init method. Events should never be connected or fired within the Init method. Do this within the Start method. Because Modules and Shared modules are lazy-loaded, their Init methods are invoked the first time they are referenced.","title":"Notes and Best Practices"},{"location":"install/","text":"Install & Setup \u00b6 The preferred editor for the AeroGameFramework is Visual Studio Code . AeroGameFramework includes a VS Code extension, and ties in with other useful extensions & plugins (such as Rojo and Selene). Requirements \u00b6 Name Description Required AeroGameFramework Main VS Code extension Yes Rojo Sync files between VS Code and Roblox Studio Yes Rojo for VS Code Use and manage Rojo directly from VS Code No Selene Static analyzer and linter for Lua No Selene for VS Code Static analyzer and linter for Lua No Project Setup \u00b6 Created a new directory for your project Open the directory within VS Code ( File > Open Folder... ) From the command panel ( Ctrl+Shift+P ), run AeroGameFramework: Init If using the Rojo VS Code extension, restart VS Code Enable HTTP requests within your Roblox game settings Start Rojo and run the Rojo plugin within Roblox Studio If not using the Rojo VS Code extension, run rojo serve Directory Structure \u00b6 src : Source files Client : Client-side code Controllers : Client-side singleton controllers Modules : Lazy-loaded plain modules Server : Server-side code Services : Server-side singleton services Modules : Lazy-loaded plain modules Shared : Lazy-loaded plain modules shared between the client and server _framework : Internal framework source files (Hidden within VS Code by default) Note The rojo.json and default.project.json files are specifically configured to work with the directory structure described above. Changing the structure may break Rojo from properly syncing changes into Roblox Studio. AGF Tree View \u00b6 The VS Code extension for AeroGameFramework provides a simplified directory hierarchy that will only show the source files that should be edited. In other words, it hides all of the files that you do not need to worry about. This view can be selected from the \"AGF\" icon on the left-hand panel in VS Code. Creating new source files (Services, Controllers, and Modules) \u00b6 Right-click within the AGF Tree View and click on AeroGameFramework: Create from the context menu, or click the Script Add button at the top Select whether the source file should exist within the Server, Client, or Shared environment Select the source type (e.g. Service, Controller, or Module) Type in the name and press Enter Tip If you right-click within given directories, the extension will automatically assume the desired file type. For instance, if you right-click on Services and click Create, the extension will immediately prompt for a new service name. Tip If you right-click and click Create on an existing source file, you can create nested modules within the existing file. This will automatically create the necessary Rojo structure. Please note that nested modules do not get consumed by the framework and must be required manually. Note When creating a Module, a prompt will show up to choose between a Plain Module and a Class Module. A Plain Module is just a typical ModuleScript with an empty table defined. A Class Module contains the necessary boilerplate code for basic OOP modules. Roblox Structure \u00b6 AeroGameFramework is structured into three major categories: Server, Client, and Shared. Environment Location Description Server ServerStorage.Aero Server-side code Client StarterPlayerScripts.Aero Client-side code Shared ReplicatedStorage.Aero Shared modules between the server and client Note If developing within Visual Studio Code, these folders should be left untouched within Roblox Studio to prevent any unexpected data loss due to Rojo syncing.","title":"Install & Setup"},{"location":"install/#install-setup","text":"The preferred editor for the AeroGameFramework is Visual Studio Code . AeroGameFramework includes a VS Code extension, and ties in with other useful extensions & plugins (such as Rojo and Selene).","title":"Install &amp; Setup"},{"location":"install/#requirements","text":"Name Description Required AeroGameFramework Main VS Code extension Yes Rojo Sync files between VS Code and Roblox Studio Yes Rojo for VS Code Use and manage Rojo directly from VS Code No Selene Static analyzer and linter for Lua No Selene for VS Code Static analyzer and linter for Lua No","title":"Requirements"},{"location":"install/#project-setup","text":"Created a new directory for your project Open the directory within VS Code ( File > Open Folder... ) From the command panel ( Ctrl+Shift+P ), run AeroGameFramework: Init If using the Rojo VS Code extension, restart VS Code Enable HTTP requests within your Roblox game settings Start Rojo and run the Rojo plugin within Roblox Studio If not using the Rojo VS Code extension, run rojo serve","title":"Project Setup"},{"location":"install/#directory-structure","text":"src : Source files Client : Client-side code Controllers : Client-side singleton controllers Modules : Lazy-loaded plain modules Server : Server-side code Services : Server-side singleton services Modules : Lazy-loaded plain modules Shared : Lazy-loaded plain modules shared between the client and server _framework : Internal framework source files (Hidden within VS Code by default) Note The rojo.json and default.project.json files are specifically configured to work with the directory structure described above. Changing the structure may break Rojo from properly syncing changes into Roblox Studio.","title":"Directory Structure"},{"location":"install/#agf-tree-view","text":"The VS Code extension for AeroGameFramework provides a simplified directory hierarchy that will only show the source files that should be edited. In other words, it hides all of the files that you do not need to worry about. This view can be selected from the \"AGF\" icon on the left-hand panel in VS Code.","title":"AGF Tree View"},{"location":"install/#creating-new-source-files-services-controllers-and-modules","text":"Right-click within the AGF Tree View and click on AeroGameFramework: Create from the context menu, or click the Script Add button at the top Select whether the source file should exist within the Server, Client, or Shared environment Select the source type (e.g. Service, Controller, or Module) Type in the name and press Enter Tip If you right-click within given directories, the extension will automatically assume the desired file type. For instance, if you right-click on Services and click Create, the extension will immediately prompt for a new service name. Tip If you right-click and click Create on an existing source file, you can create nested modules within the existing file. This will automatically create the necessary Rojo structure. Please note that nested modules do not get consumed by the framework and must be required manually. Note When creating a Module, a prompt will show up to choose between a Plain Module and a Class Module. A Plain Module is just a typical ModuleScript with an empty table defined. A Class Module contains the necessary boilerplate code for basic OOP modules.","title":"Creating new source files (Services, Controllers, and Modules)"},{"location":"install/#roblox-structure","text":"AeroGameFramework is structured into three major categories: Server, Client, and Shared. Environment Location Description Server ServerStorage.Aero Server-side code Client StarterPlayerScripts.Aero Client-side code Shared ReplicatedStorage.Aero Shared modules between the server and client Note If developing within Visual Studio Code, these folders should be left untouched within Roblox Studio to prevent any unexpected data loss due to Rojo syncing.","title":"Roblox Structure"},{"location":"modules/","text":"Modules \u00b6 This section covers the three environments where modules exist: Server , Client , and Shared . Modules behave in the same way in each location. Usage \u00b6 Like other framework objects, modules can also have Init and Start methods. However, these methods are optional. The biggest difference with Modules is that they are lazy-loaded. In other words, modules are not necessarily loaded at the beginning of runtime. Instead, they are loaded the first time they are referenced. What this means is that you can have a large collection of modules that you reuse within many projects, but are not necessarily eating up much memory. Lazy-loading is handled in the background, and it should not affect anything regarding the way you use a module. The most noticeable difference is that the Init and Start methods will not be invoked until the first time a module is referenced. Like any ModuleScript on Roblox, modules have the same structure: 1 2 3 4 5 local MyModule = {} -- 'MyModule:Start()' and 'MyModule:Init()' methods are optional. return MyModule Classes \u00b6 The Modules folder is the preferred location for classes. A Lua pseudo-class will usually look something like this at its core: 1 2 3 4 5 6 7 8 9 10 11 local MyClass = {} MyClass . __index = MyClass function MyClass . new () local self = setmetatable ({ -- Object properties here }, MyClass ) return self end return MyClass Framework access \u00b6 With classes, the Aero Start and Init methods are also available, and are invoked as static methods once. In other words, the methods are not invoked on individual objects created from the class, but are invoked on the class itself. This is useful for referencing AGF modules that the class needs to use. For instance: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 local MyClass = {} local Maid function MyClass . new () local self = setmetatable ({ maid = Maid . new (); -- Create a maid object }, MyClass ) return self end function MyClass : Init () -- Reference the Maid object: Maid = self . Shared . Maid end Alternatively, the framework is also injected into the class, thus each object can still access AGF modules, just like other modules: 1 2 3 4 function MyClass : DoSomething () -- Call a controller within the framework: self . Controllers . MyController : Hello () end Object Events \u00b6 Creating events is very useful for custom objects, but it is important that these events are properly registered and cleaned up. It is recommended that the ListenerList and/or Maid class is used, as well as a custom-defined Destroy method on your object: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 function MyClass . new () local self = setmetatable ({}, MyClass ) -- Create events: self . Start = self . Shared . Signal . new () self . Stop = self . Shared . Signal . new () -- Create maid: self . Maid = self . Shared . Maid . new () self . Maid : GiveTask ( self . Start ) self . Maid : GiveTask ( self . Stop ) return self end function MyClass : Destroy () -- Will destroy the events: self . Maid : Destroy () end Now, a MyClass instance could be used as such: 1 2 3 4 local obj = MyClass . new () obj . Start : Connect ( function () print ( \"Start!\" ) end ) wait ( 5 ) obj : Destroy () Client/Server Communication \u00b6 Allowing class objects to communicate between the server/client boundary is the same as other objects within the framework. For instance, an object on the client invoking the server: 1 2 3 function MyClass : DoSomething () self . Services . MyService : DoSomething () end Prevent Init or Start \u00b6 If you are trying to use a module that already has a Start or Init method that doesn't relate to AeroGameFramework (e.g. a 3rd-party module not designed for the framework), then you can prevent the framework from invoking these methods. This is done by setting the PreventInit and PreventStart flags on the settings module for the given module. For more info, see the Settings section. Third-Party Modules \u00b6 When using third-party modules within AGF, it is recommended to use Standalone mode. For more info, see the Third-Party section for settings.","title":"Modules"},{"location":"modules/#modules","text":"This section covers the three environments where modules exist: Server , Client , and Shared . Modules behave in the same way in each location.","title":"Modules"},{"location":"modules/#usage","text":"Like other framework objects, modules can also have Init and Start methods. However, these methods are optional. The biggest difference with Modules is that they are lazy-loaded. In other words, modules are not necessarily loaded at the beginning of runtime. Instead, they are loaded the first time they are referenced. What this means is that you can have a large collection of modules that you reuse within many projects, but are not necessarily eating up much memory. Lazy-loading is handled in the background, and it should not affect anything regarding the way you use a module. The most noticeable difference is that the Init and Start methods will not be invoked until the first time a module is referenced. Like any ModuleScript on Roblox, modules have the same structure: 1 2 3 4 5 local MyModule = {} -- 'MyModule:Start()' and 'MyModule:Init()' methods are optional. return MyModule","title":"Usage"},{"location":"modules/#classes","text":"The Modules folder is the preferred location for classes. A Lua pseudo-class will usually look something like this at its core: 1 2 3 4 5 6 7 8 9 10 11 local MyClass = {} MyClass . __index = MyClass function MyClass . new () local self = setmetatable ({ -- Object properties here }, MyClass ) return self end return MyClass","title":"Classes"},{"location":"modules/#framework-access","text":"With classes, the Aero Start and Init methods are also available, and are invoked as static methods once. In other words, the methods are not invoked on individual objects created from the class, but are invoked on the class itself. This is useful for referencing AGF modules that the class needs to use. For instance: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 local MyClass = {} local Maid function MyClass . new () local self = setmetatable ({ maid = Maid . new (); -- Create a maid object }, MyClass ) return self end function MyClass : Init () -- Reference the Maid object: Maid = self . Shared . Maid end Alternatively, the framework is also injected into the class, thus each object can still access AGF modules, just like other modules: 1 2 3 4 function MyClass : DoSomething () -- Call a controller within the framework: self . Controllers . MyController : Hello () end","title":"Framework access"},{"location":"modules/#object-events","text":"Creating events is very useful for custom objects, but it is important that these events are properly registered and cleaned up. It is recommended that the ListenerList and/or Maid class is used, as well as a custom-defined Destroy method on your object: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 function MyClass . new () local self = setmetatable ({}, MyClass ) -- Create events: self . Start = self . Shared . Signal . new () self . Stop = self . Shared . Signal . new () -- Create maid: self . Maid = self . Shared . Maid . new () self . Maid : GiveTask ( self . Start ) self . Maid : GiveTask ( self . Stop ) return self end function MyClass : Destroy () -- Will destroy the events: self . Maid : Destroy () end Now, a MyClass instance could be used as such: 1 2 3 4 local obj = MyClass . new () obj . Start : Connect ( function () print ( \"Start!\" ) end ) wait ( 5 ) obj : Destroy ()","title":"Object Events"},{"location":"modules/#clientserver-communication","text":"Allowing class objects to communicate between the server/client boundary is the same as other objects within the framework. For instance, an object on the client invoking the server: 1 2 3 function MyClass : DoSomething () self . Services . MyService : DoSomething () end","title":"Client/Server Communication"},{"location":"modules/#prevent-init-or-start","text":"If you are trying to use a module that already has a Start or Init method that doesn't relate to AeroGameFramework (e.g. a 3rd-party module not designed for the framework), then you can prevent the framework from invoking these methods. This is done by setting the PreventInit and PreventStart flags on the settings module for the given module. For more info, see the Settings section.","title":"Prevent Init or Start"},{"location":"modules/#third-party-modules","text":"When using third-party modules within AGF, it is recommended to use Standalone mode. For more info, see the Third-Party section for settings.","title":"Third-Party Modules"},{"location":"services/","text":"Services \u00b6 A service is a singleton initiated at runtime on the server. Services should serve specific purposes. For instance, the provided DataService allows simplified data management. You might also create a WeaponService, which might be used for holding and figuring out weapon information for the players. API \u00b6 A service in its simplest form looks like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 local MyService = { Client = {}} function MyService : Start () -- Called after all services have been initialized -- Called asynchronously from other services -- Safe to call any other framework modules end function MyService : Init () -- Called after all modules have been \"required\" but before 'Start()' has been called on any of them -- Safe to reference 'self.Services/Modules/Shared' -- NOT safe to USE/CALL other services yet (use them in/after Start method) -- Register all events here (but only connect to events in Start) end return MyService Injected Properties \u00b6 Property Description service.Services Table of all other services, referenced by the name of the ModuleScript service.Modules Table of all modules, referenced by the name of the ModuleScript service.Shared Table of all shared modules, referenced by the name of the ModuleScript service.Client.Server Reference back to the service, so client-facing methods can invoke server-facing methods Injected Methods \u00b6 Returns Method void service:RegisterEvent(String eventName) void service:RegisterClientEvent(String clientEventName) void service:Fire(String eventName, ...) void service:FireClient(String clientEventName, Player player, ...) void service:FireAllClients(String clientEventName, ...) void service:FireOtherClients(String clientEventName, Player player, ...) Table service:WrapModule(Table tbl) Connection service:ConnectEvent(String eventName, Function handler) Connection service:ConnectClientEvent(String clientEventName, Function handler) service:Init() \u00b6 The Init method is called on each service in the framework in a synchronous and linear progression. In other words, each service's Init method is invoked one after the other. Each Init method must fully execute before moving onto the next. This is essentially the constructor for the service singleton. The method should be used to set up your service. For instance, you might want to create events or reference other services. Use the Init method to register events and initialize any necessary components before the Start method is invoked. Warning The Init method should not invoke any methods from other services yet, because it is not guaranteed that those services have had their Init methods invoked yet. It is safe to reference other services, but not to invoke their methods. service:Start() \u00b6 The Start method is called after all services have been initialized (i.e. their Init methods have been fully executed). Each Start method is executed on a separate thread (asynchronously). From here, it is safe to reference and invoke other services in the framework. Custom Methods \u00b6 Adding your own methods to a service is very easy. Simply attach a function to the service table: 1 2 3 4 5 6 7 8 9 -- Custom method: function MyService : PrintSomething (...) print ( \"MyService:\" , ...) end function MyService : Start () -- Invoke the custom method: self : PrintSomething ( \"Hi\" , \"Hello\" , 32 , true , \"ABC\" ) end Other services can also invoke your custom method: 1 2 3 function AnotherService : Start () self . Services . MyService : PrintSomething ( \"Hello\" , false , 64 ) end Server Events \u00b6 You can create and listen to events using the RegisterEvent , ConnectEvent , and Fire methods. All events should always be registered within the Init method. The ConnectEvent and Fire methods should never be used within an Init method. 1 2 3 4 5 6 7 8 9 10 11 12 13 function MyService : Start () -- Connect to 'Hello' event: self : ConnectEvent ( \"Hello\" , function ( msg ) print ( msg ) end ) -- Fire 'Hello' event: self : Fire ( \"Hello\" , \"Hello world!\" ) end function MyService : Init () -- Register 'Hello' event: self : RegisterEvent ( \"Hello\" ) end WrapModule \u00b6 The WrapModule method can be used to transform a table into a framework-like module. In other words, it sets the table's metatable to the same metatable used by other framework modules, thus exposing the framework to the given table. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 function MyService : Start () local thisThing = {} function thisThing : Start () print ( \"thisThing started\" ) end function thisThing : Init () print ( \"thisThing initialized\" ) end -- Transform 'thisThing' into a framework object: self : WrapModule ( thisThing ) -- Another example where an external module is loaded: local anotherThing = require ( someModule ) self : WrapModule ( anotherThing ) -- Wrapping and requiring an external module in one line: local otherModuleWrapped = self : WrapModule ( require ( otherModule )) end Tip This can be useful if you are requiring other non-framework modules in which you want to expose the framework. Client Table \u00b6 The Client table is used to expose methods and events to the client. Client Methods \u00b6 To expose a method to the client, write a function attached to the client table: 1 2 3 function MyService . Client : Echo ( player , message ) return message end Attention The player argument must always be the first argument for client methods. Any other arguments reflect what the client has sent. Client Events \u00b6 To expose an event to the client, use the RegisterClientEvent method in the Init method. Use FireClient and FireAllClients to fire the event: 1 2 3 4 5 6 7 8 9 10 11 12 function MyService : Start () -- Fire client event for a specific player: self : FireClient ( \"MyClientEvent\" , somePlayer , \"Hello\" ) -- Fire client event for all players: self : FireAllClients ( \"MyClientEvent\" , \"Hello\" ) end function MyService : Init () -- Register client event: self : RegisterClientEvent ( \"MyClientMethod\" ) end Reference Server Table \u00b6 When executing code with a client-exposed method, it is useful to be able to reference back to the main service table. Therefore, the Server property has been injected into the Client table: 1 2 3 4 5 6 7 8 9 -- Client-exposed 'Echo' method invoking 'Print' method: function MyService . Client : Echo ( player , message ) self . Server : Print ( message ) -- Note the reference to 'self.Server' return message end function MyService : Print ( msg ) return msg end Caching Results \u00b6 In some cases, it is nice for the client to cache the results returned from the server to reduce the server load. This is especially true in cases where the returned values do not change. To enable caching, the CacheClientMethod method must be invoked for each client method. When enabling caching, the TTL (time to live) period can be set. For instance, if TTL is set to 10 , then the client will only invoke the server if the current value returned is older than 10 seconds. If the TTL argument left blank, the first value cached will always be used and will never invoke the server again. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 function MyService . Client : Hello ( player ) return \"Hello! \" .. math.random () end function MyService . Client : Bye ( player ) return \"Bye! \" .. math.random () end function MyService : Init () -- The client will cache the result of 'Hello' forever: self : CacheClientMethod ( \"Hello\" ) -- The client will cache the result of 'Bye' for 60 seconds: self : CacheClientMethod ( \"Bye\" , 60 ) end Note No changes need to be done on the client. The client will automatically pick up on the caching rules defined in the service. Warning The CacheClientMethod should only be invoked within the Init method of a service. Forcing Init Order \u00b6 By using the Order setting, the Init execution order can be defined. By default, the order of execution is undetermined. For instance, you have services called MyService and AnotherService , you could have MyService.settings and AnotherService.settings modules with the following configuration: 1 2 3 4 -- MyService.settings return { Order = 1 ; } 1 2 3 4 -- AnotherService.settings return { Order = 2 ; } With this configuration, it is guaranteed that MyService will have Init invoked before AnotherService . Other Examples \u00b6 Invoking another service \u00b6 1 2 3 4 5 function MyService : Start () -- Get some global data from the DataService: local dataService = self . Services . DataService local data = dataService : GetGlobal ( \"Test\" ) end Using a Module \u00b6 1 2 3 4 function MyService : Start () local someModule = self . Modules . SomeModule someModule : DoSomething () end Using a Shared module \u00b6 1 2 3 4 5 6 function MyService : Start () -- Print the current date: local Date = self . Shared . Date local now = Date . new () print ( \"Now\" , now ) end","title":"Services"},{"location":"services/#services","text":"A service is a singleton initiated at runtime on the server. Services should serve specific purposes. For instance, the provided DataService allows simplified data management. You might also create a WeaponService, which might be used for holding and figuring out weapon information for the players.","title":"Services"},{"location":"services/#api","text":"A service in its simplest form looks like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 local MyService = { Client = {}} function MyService : Start () -- Called after all services have been initialized -- Called asynchronously from other services -- Safe to call any other framework modules end function MyService : Init () -- Called after all modules have been \"required\" but before 'Start()' has been called on any of them -- Safe to reference 'self.Services/Modules/Shared' -- NOT safe to USE/CALL other services yet (use them in/after Start method) -- Register all events here (but only connect to events in Start) end return MyService","title":"API"},{"location":"services/#injected-properties","text":"Property Description service.Services Table of all other services, referenced by the name of the ModuleScript service.Modules Table of all modules, referenced by the name of the ModuleScript service.Shared Table of all shared modules, referenced by the name of the ModuleScript service.Client.Server Reference back to the service, so client-facing methods can invoke server-facing methods","title":"Injected Properties"},{"location":"services/#injected-methods","text":"Returns Method void service:RegisterEvent(String eventName) void service:RegisterClientEvent(String clientEventName) void service:Fire(String eventName, ...) void service:FireClient(String clientEventName, Player player, ...) void service:FireAllClients(String clientEventName, ...) void service:FireOtherClients(String clientEventName, Player player, ...) Table service:WrapModule(Table tbl) Connection service:ConnectEvent(String eventName, Function handler) Connection service:ConnectClientEvent(String clientEventName, Function handler)","title":"Injected Methods"},{"location":"services/#serviceinit","text":"The Init method is called on each service in the framework in a synchronous and linear progression. In other words, each service's Init method is invoked one after the other. Each Init method must fully execute before moving onto the next. This is essentially the constructor for the service singleton. The method should be used to set up your service. For instance, you might want to create events or reference other services. Use the Init method to register events and initialize any necessary components before the Start method is invoked. Warning The Init method should not invoke any methods from other services yet, because it is not guaranteed that those services have had their Init methods invoked yet. It is safe to reference other services, but not to invoke their methods.","title":"service:Init()"},{"location":"services/#servicestart","text":"The Start method is called after all services have been initialized (i.e. their Init methods have been fully executed). Each Start method is executed on a separate thread (asynchronously). From here, it is safe to reference and invoke other services in the framework.","title":"service:Start()"},{"location":"services/#custom-methods","text":"Adding your own methods to a service is very easy. Simply attach a function to the service table: 1 2 3 4 5 6 7 8 9 -- Custom method: function MyService : PrintSomething (...) print ( \"MyService:\" , ...) end function MyService : Start () -- Invoke the custom method: self : PrintSomething ( \"Hi\" , \"Hello\" , 32 , true , \"ABC\" ) end Other services can also invoke your custom method: 1 2 3 function AnotherService : Start () self . Services . MyService : PrintSomething ( \"Hello\" , false , 64 ) end","title":"Custom Methods"},{"location":"services/#server-events","text":"You can create and listen to events using the RegisterEvent , ConnectEvent , and Fire methods. All events should always be registered within the Init method. The ConnectEvent and Fire methods should never be used within an Init method. 1 2 3 4 5 6 7 8 9 10 11 12 13 function MyService : Start () -- Connect to 'Hello' event: self : ConnectEvent ( \"Hello\" , function ( msg ) print ( msg ) end ) -- Fire 'Hello' event: self : Fire ( \"Hello\" , \"Hello world!\" ) end function MyService : Init () -- Register 'Hello' event: self : RegisterEvent ( \"Hello\" ) end","title":"Server Events"},{"location":"services/#wrapmodule","text":"The WrapModule method can be used to transform a table into a framework-like module. In other words, it sets the table's metatable to the same metatable used by other framework modules, thus exposing the framework to the given table. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 function MyService : Start () local thisThing = {} function thisThing : Start () print ( \"thisThing started\" ) end function thisThing : Init () print ( \"thisThing initialized\" ) end -- Transform 'thisThing' into a framework object: self : WrapModule ( thisThing ) -- Another example where an external module is loaded: local anotherThing = require ( someModule ) self : WrapModule ( anotherThing ) -- Wrapping and requiring an external module in one line: local otherModuleWrapped = self : WrapModule ( require ( otherModule )) end Tip This can be useful if you are requiring other non-framework modules in which you want to expose the framework.","title":"WrapModule"},{"location":"services/#client-table","text":"The Client table is used to expose methods and events to the client.","title":"Client Table"},{"location":"services/#client-methods","text":"To expose a method to the client, write a function attached to the client table: 1 2 3 function MyService . Client : Echo ( player , message ) return message end Attention The player argument must always be the first argument for client methods. Any other arguments reflect what the client has sent.","title":"Client Methods"},{"location":"services/#client-events","text":"To expose an event to the client, use the RegisterClientEvent method in the Init method. Use FireClient and FireAllClients to fire the event: 1 2 3 4 5 6 7 8 9 10 11 12 function MyService : Start () -- Fire client event for a specific player: self : FireClient ( \"MyClientEvent\" , somePlayer , \"Hello\" ) -- Fire client event for all players: self : FireAllClients ( \"MyClientEvent\" , \"Hello\" ) end function MyService : Init () -- Register client event: self : RegisterClientEvent ( \"MyClientMethod\" ) end","title":"Client Events"},{"location":"services/#reference-server-table","text":"When executing code with a client-exposed method, it is useful to be able to reference back to the main service table. Therefore, the Server property has been injected into the Client table: 1 2 3 4 5 6 7 8 9 -- Client-exposed 'Echo' method invoking 'Print' method: function MyService . Client : Echo ( player , message ) self . Server : Print ( message ) -- Note the reference to 'self.Server' return message end function MyService : Print ( msg ) return msg end","title":"Reference Server Table"},{"location":"services/#caching-results","text":"In some cases, it is nice for the client to cache the results returned from the server to reduce the server load. This is especially true in cases where the returned values do not change. To enable caching, the CacheClientMethod method must be invoked for each client method. When enabling caching, the TTL (time to live) period can be set. For instance, if TTL is set to 10 , then the client will only invoke the server if the current value returned is older than 10 seconds. If the TTL argument left blank, the first value cached will always be used and will never invoke the server again. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 function MyService . Client : Hello ( player ) return \"Hello! \" .. math.random () end function MyService . Client : Bye ( player ) return \"Bye! \" .. math.random () end function MyService : Init () -- The client will cache the result of 'Hello' forever: self : CacheClientMethod ( \"Hello\" ) -- The client will cache the result of 'Bye' for 60 seconds: self : CacheClientMethod ( \"Bye\" , 60 ) end Note No changes need to be done on the client. The client will automatically pick up on the caching rules defined in the service. Warning The CacheClientMethod should only be invoked within the Init method of a service.","title":"Caching Results"},{"location":"services/#forcing-init-order","text":"By using the Order setting, the Init execution order can be defined. By default, the order of execution is undetermined. For instance, you have services called MyService and AnotherService , you could have MyService.settings and AnotherService.settings modules with the following configuration: 1 2 3 4 -- MyService.settings return { Order = 1 ; } 1 2 3 4 -- AnotherService.settings return { Order = 2 ; } With this configuration, it is guaranteed that MyService will have Init invoked before AnotherService .","title":"Forcing Init Order"},{"location":"services/#other-examples","text":"","title":"Other Examples"},{"location":"services/#invoking-another-service","text":"1 2 3 4 5 function MyService : Start () -- Get some global data from the DataService: local dataService = self . Services . DataService local data = dataService : GetGlobal ( \"Test\" ) end","title":"Invoking another service"},{"location":"services/#using-a-module","text":"1 2 3 4 function MyService : Start () local someModule = self . Modules . SomeModule someModule : DoSomething () end","title":"Using a Module"},{"location":"services/#using-a-shared-module","text":"1 2 3 4 5 6 function MyService : Start () -- Print the current date: local Date = self . Shared . Date local now = Date . new () print ( \"Now\" , now ) end","title":"Using a Shared module"},{"location":"settings/","text":"Settings \u00b6 In some scenarios, it is useful to override the default AGF behavior on modules, such as preventing the framework from invoking Start or Init . This can be done by creating a .settings ModuleScript alongside the service, controller, or module. Settings Module \u00b6 For instance, if there is a controller named MyController , its accompanying settings file would be named MyController.settings . Each settings file should return a table like shown: 1 2 3 4 5 6 return { Order = 1000 ; PreventInit = false ; PreventStart = false ; Standalone = false ; } The fields above are defined as such: Field Default Description Order 1000 The Init execution order for services and controllers PreventInit false Will prevent calling Init on any module with this field as true (does not apply to services/controllers) PreventStart false Will prevent calling Start on any module with this field as true (does not apply to services/controllers) Standalone false Will treat a module as a plain standalone module and won't inject any AGF information (useful for third-party modules) Note Each field is optional. If the field is not provided, or if no .settings module is found, then the default values will be used instead. Third-Party Modules \u00b6 When using third-party modules within AGF, it is recommended to use Standalone mode. To do this, make an accompanying .settings file (e.g. DataStore2.settings or Roact.settings ) with the following configuration: 1 return { Standalone = true } In-Depth \u00b6 Order \u00b6 The execution order for Init within services and controllers. By default, this is set to 1000 . This number is simply utilized to sort the services/controllers before invoking each Init method, so any valid number within Lua can be used. In most scenarios, the execution order will not matter and this setting can be ignored. In some other edge-cases, it's crucial for certain modules to be initialized before others. In such edge-cases, this setting should be used to guarantee order. PreventInit \u00b6 This flag will allow the Init method to be skipped within modules. This will not work for services or controllers. The purpose of this flag is to allow third-party modules to tie into AGF that might already have an Init method for other purposes. This value should be either true or false . The default value is false . PreventStart \u00b6 This flag will allow the Start method to be skipped within modules. This will not work for services or controllers. The purpose of this flag is to allow third-party modules to tie into AGF that might already have an Start method for other purposes. This value should be either true or false . The default value is false . Standalone \u00b6 This flag will prevent AGF from wrapping the module with the AGF metatable. This should be used when using third-party modules such as DataStore2 and Roact.","title":"Settings"},{"location":"settings/#settings","text":"In some scenarios, it is useful to override the default AGF behavior on modules, such as preventing the framework from invoking Start or Init . This can be done by creating a .settings ModuleScript alongside the service, controller, or module.","title":"Settings"},{"location":"settings/#settings-module","text":"For instance, if there is a controller named MyController , its accompanying settings file would be named MyController.settings . Each settings file should return a table like shown: 1 2 3 4 5 6 return { Order = 1000 ; PreventInit = false ; PreventStart = false ; Standalone = false ; } The fields above are defined as such: Field Default Description Order 1000 The Init execution order for services and controllers PreventInit false Will prevent calling Init on any module with this field as true (does not apply to services/controllers) PreventStart false Will prevent calling Start on any module with this field as true (does not apply to services/controllers) Standalone false Will treat a module as a plain standalone module and won't inject any AGF information (useful for third-party modules) Note Each field is optional. If the field is not provided, or if no .settings module is found, then the default values will be used instead.","title":"Settings Module"},{"location":"settings/#third-party-modules","text":"When using third-party modules within AGF, it is recommended to use Standalone mode. To do this, make an accompanying .settings file (e.g. DataStore2.settings or Roact.settings ) with the following configuration: 1 return { Standalone = true }","title":"Third-Party Modules"},{"location":"settings/#in-depth","text":"","title":"In-Depth"},{"location":"settings/#order","text":"The execution order for Init within services and controllers. By default, this is set to 1000 . This number is simply utilized to sort the services/controllers before invoking each Init method, so any valid number within Lua can be used. In most scenarios, the execution order will not matter and this setting can be ignored. In some other edge-cases, it's crucial for certain modules to be initialized before others. In such edge-cases, this setting should be used to guarantee order.","title":"Order"},{"location":"settings/#preventinit","text":"This flag will allow the Init method to be skipped within modules. This will not work for services or controllers. The purpose of this flag is to allow third-party modules to tie into AGF that might already have an Init method for other purposes. This value should be either true or false . The default value is false .","title":"PreventInit"},{"location":"settings/#preventstart","text":"This flag will allow the Start method to be skipped within modules. This will not work for services or controllers. The purpose of this flag is to allow third-party modules to tie into AGF that might already have an Start method for other purposes. This value should be either true or false . The default value is false .","title":"PreventStart"},{"location":"settings/#standalone","text":"This flag will prevent AGF from wrapping the module with the AGF metatable. This should be used when using third-party modules such as DataStore2 and Roact.","title":"Standalone"},{"location":"module_docs/client_controllers/fade/","text":"The Fade controller allows for easy and simple fade-in and fade-out effects on the screen. For most cases, using just the In and Out methods is enough. Methods \u00b6 In([Number duration [, Boolean async]]) \u00b6 Fade in from black. 1 2 3 Fade : In () -- Fade in over 0.5 seconds Fade : In ( 1.5 ) -- Fade in over 1.5 seconds) Fade : In ( 1.5 , true ) -- Fade in asynchronously over 1.5 seconds Out([Number duration [, Boolean async]]) \u00b6 Fade out to black. 1 2 3 Fade : Out () -- Fade out over 0.5 seconds Fade : Out ( 1.5 ) -- Fade out over 1.5 seconds) Fade : Out ( 1.5 , true ) -- Fade out asynchronously over 1.5 seconds To(Number transparency [, Number duration [, Boolean async]]) \u00b6 Fade to the given transparency, starting at whatever the current fade transparency is set. 1 Fade : To ( 0.75 ) -- Fade to a transparency of 0.75 (75%) FromTo(Number from, Number to [, Number dur [, Boolean async]]) \u00b6 Fade from one transparency level to another. This is also used internally by the In and Out fade methods. 1 Fade : FromTo ( 0.75 , 0.25 ) -- Fade from 0.75 to 0.25 SetText(String text) \u00b6 Set the text that will show up in the center of the screen when the fade screen is visible. 1 Fade : SetText ( \"Hello world\" ) ClearText() \u00b6 Clear the text on the fade screen. 1 Fade : ClearText () SetTextSize(Number textSize) \u00b6 Set the text size for the fade screen label. 1 Fade : SetTextSize ( 24 ) SetFont(Font font) \u00b6 Set the font for the fade screen label. 1 Fade : SetFont ( Enum . Font . Highway ) SetBackgroundColor(Color3 color) \u00b6 Sets the background color of the fade frame. 1 Fade : SetBackgroundColor ( Color3 . new ( 0.5 , 0.5 , 0.5 )) SetTextColor(Color3 color) \u00b6 Sets the text color of the fade text label. 1 Fade : SetBackgroundColor ( Color3 . new ( 1 , 0 , 0 )) SetEasingStyle(EasingStyle easingStyle) \u00b6 Sets the tween easing style for the fading effect. Defaults to Quad. 1 Fade : SetEasingStyle ( Enum . EasingStyle . Quint ) GetScreenGui() \u00b6 Returns the ScreenGui used by the Fade controller. 1 local gui = Fade : GetScreenGui () GetFrame() \u00b6 Returns the Frame used by the Fade controller. 1 local gui = Fade : GetFrame () GetLabel() \u00b6 Returns the TextLabel used by the Fade controller. 1 local gui = Fade : GetLabel ()","title":"Fade"},{"location":"module_docs/client_controllers/fade/#methods","text":"","title":"Methods"},{"location":"module_docs/client_controllers/fade/#innumber-duration-boolean-async","text":"Fade in from black. 1 2 3 Fade : In () -- Fade in over 0.5 seconds Fade : In ( 1.5 ) -- Fade in over 1.5 seconds) Fade : In ( 1.5 , true ) -- Fade in asynchronously over 1.5 seconds","title":"In([Number duration [, Boolean async]])"},{"location":"module_docs/client_controllers/fade/#outnumber-duration-boolean-async","text":"Fade out to black. 1 2 3 Fade : Out () -- Fade out over 0.5 seconds Fade : Out ( 1.5 ) -- Fade out over 1.5 seconds) Fade : Out ( 1.5 , true ) -- Fade out asynchronously over 1.5 seconds","title":"Out([Number duration [, Boolean async]])"},{"location":"module_docs/client_controllers/fade/#tonumber-transparency-number-duration-boolean-async","text":"Fade to the given transparency, starting at whatever the current fade transparency is set. 1 Fade : To ( 0.75 ) -- Fade to a transparency of 0.75 (75%)","title":"To(Number transparency [, Number duration [, Boolean async]])"},{"location":"module_docs/client_controllers/fade/#fromtonumber-from-number-to-number-dur-boolean-async","text":"Fade from one transparency level to another. This is also used internally by the In and Out fade methods. 1 Fade : FromTo ( 0.75 , 0.25 ) -- Fade from 0.75 to 0.25","title":"FromTo(Number from, Number to [, Number dur [, Boolean async]])"},{"location":"module_docs/client_controllers/fade/#settextstring-text","text":"Set the text that will show up in the center of the screen when the fade screen is visible. 1 Fade : SetText ( \"Hello world\" )","title":"SetText(String text)"},{"location":"module_docs/client_controllers/fade/#cleartext","text":"Clear the text on the fade screen. 1 Fade : ClearText ()","title":"ClearText()"},{"location":"module_docs/client_controllers/fade/#settextsizenumber-textsize","text":"Set the text size for the fade screen label. 1 Fade : SetTextSize ( 24 )","title":"SetTextSize(Number textSize)"},{"location":"module_docs/client_controllers/fade/#setfontfont-font","text":"Set the font for the fade screen label. 1 Fade : SetFont ( Enum . Font . Highway )","title":"SetFont(Font font)"},{"location":"module_docs/client_controllers/fade/#setbackgroundcolorcolor3-color","text":"Sets the background color of the fade frame. 1 Fade : SetBackgroundColor ( Color3 . new ( 0.5 , 0.5 , 0.5 ))","title":"SetBackgroundColor(Color3 color)"},{"location":"module_docs/client_controllers/fade/#settextcolorcolor3-color","text":"Sets the text color of the fade text label. 1 Fade : SetBackgroundColor ( Color3 . new ( 1 , 0 , 0 ))","title":"SetTextColor(Color3 color)"},{"location":"module_docs/client_controllers/fade/#seteasingstyleeasingstyle-easingstyle","text":"Sets the tween easing style for the fading effect. Defaults to Quad. 1 Fade : SetEasingStyle ( Enum . EasingStyle . Quint )","title":"SetEasingStyle(EasingStyle easingStyle)"},{"location":"module_docs/client_controllers/fade/#getscreengui","text":"Returns the ScreenGui used by the Fade controller. 1 local gui = Fade : GetScreenGui ()","title":"GetScreenGui()"},{"location":"module_docs/client_controllers/fade/#getframe","text":"Returns the Frame used by the Fade controller. 1 local gui = Fade : GetFrame ()","title":"GetFrame()"},{"location":"module_docs/client_controllers/fade/#getlabel","text":"Returns the TextLabel used by the Fade controller. 1 local gui = Fade : GetLabel ()","title":"GetLabel()"},{"location":"module_docs/client_controllers/task_scheduler/","text":"Coming soon","title":"TaskScheduler"},{"location":"module_docs/client_controllers/user_input/","text":"The UserInput controller gives access to sub-modules for specific inputs to the mouse, keyboard, gamepad, and mobile. Properties \u00b6 Preferred \u00b6 A list of preferred inputs, which should be used in conjunction with GetPreferred and PreferredChanged . Preferred Input Preferred.Keyboard Preferred.Mouse Preferred.Gamepad Preferred.Touch Preferred inputs refer to the type of input last used by the user, and this is assumed is the input the user prefers. HideMouse \u00b6 Defaults to false . If set to true , the mouse will be automatically hidden when the preferred user input is switched away from mouse or keyboard. For instance, if the user starts using a gamepad, the mouse will be hidden automatically if this property is set to true . This is off by default because it will conflict with setting the mouse visibility via the Mouse module. Methods \u00b6 Get(inputModuleName) \u00b6 Gets the input module with the given name. Module names available are Mouse , Keyboard , Gamepad , and Mobile . 1 2 3 4 local mouse = userInput : Get ( \"Mouse\" ) local keyboard = userInput : Get ( \"Keyboard\" ) local gamepad1 = userInput : Get ( \"Gamepad\" ). new ( Enum . UserInputType . Gamepad1 ) local mobile = userInput : Get ( \"Mobile\" ) GetPreferred() \u00b6 Get the preferred input, which will return one of the items from the Preferred table. 1 2 3 4 local preferred = userInput : GetPreferred () if ( preferred == userInput . Preferred . Gamepad ) then -- Use gamepad end Events \u00b6 PreferredChanged(preferred) \u00b6 Fires when the preferred input changes. This is useful for changing control schemas during runtime. One use-case is when players use a gamepad on a computer. While a gamepad might be plugged in, the user might not want to use the gamepad. However, if the user decides to switch to use the gamepad during gameplay, it is useful to be able to respond to the change. 1 2 3 4 5 6 7 8 9 userInput . PreferredChanged : Connect ( function ( preferred ) if ( preferred == userInput . Preferred . Gamepad ) then -- Use gamepad elseif ( preferred == userInput . Preferred . Touch ) then -- Use mobile else -- Use keyboard/mouse end end )","title":"UserInput"},{"location":"module_docs/client_controllers/user_input/#properties","text":"","title":"Properties"},{"location":"module_docs/client_controllers/user_input/#preferred","text":"A list of preferred inputs, which should be used in conjunction with GetPreferred and PreferredChanged . Preferred Input Preferred.Keyboard Preferred.Mouse Preferred.Gamepad Preferred.Touch Preferred inputs refer to the type of input last used by the user, and this is assumed is the input the user prefers.","title":"Preferred"},{"location":"module_docs/client_controllers/user_input/#hidemouse","text":"Defaults to false . If set to true , the mouse will be automatically hidden when the preferred user input is switched away from mouse or keyboard. For instance, if the user starts using a gamepad, the mouse will be hidden automatically if this property is set to true . This is off by default because it will conflict with setting the mouse visibility via the Mouse module.","title":"HideMouse"},{"location":"module_docs/client_controllers/user_input/#methods","text":"","title":"Methods"},{"location":"module_docs/client_controllers/user_input/#getinputmodulename","text":"Gets the input module with the given name. Module names available are Mouse , Keyboard , Gamepad , and Mobile . 1 2 3 4 local mouse = userInput : Get ( \"Mouse\" ) local keyboard = userInput : Get ( \"Keyboard\" ) local gamepad1 = userInput : Get ( \"Gamepad\" ). new ( Enum . UserInputType . Gamepad1 ) local mobile = userInput : Get ( \"Mobile\" )","title":"Get(inputModuleName)"},{"location":"module_docs/client_controllers/user_input/#getpreferred","text":"Get the preferred input, which will return one of the items from the Preferred table. 1 2 3 4 local preferred = userInput : GetPreferred () if ( preferred == userInput . Preferred . Gamepad ) then -- Use gamepad end","title":"GetPreferred()"},{"location":"module_docs/client_controllers/user_input/#events","text":"","title":"Events"},{"location":"module_docs/client_controllers/user_input/#preferredchangedpreferred","text":"Fires when the preferred input changes. This is useful for changing control schemas during runtime. One use-case is when players use a gamepad on a computer. While a gamepad might be plugged in, the user might not want to use the gamepad. However, if the user decides to switch to use the gamepad during gameplay, it is useful to be able to respond to the change. 1 2 3 4 5 6 7 8 9 userInput . PreferredChanged : Connect ( function ( preferred ) if ( preferred == userInput . Preferred . Gamepad ) then -- Use gamepad elseif ( preferred == userInput . Preferred . Touch ) then -- Use mobile else -- Use keyboard/mouse end end )","title":"PreferredChanged(preferred)"},{"location":"module_docs/client_controllers/user_inputs/gamepad/","text":"The Gamepad class represents gamepad instances that can be used to capture control inputs from the user. Constructor \u00b6 1 local gamepad = userInput : Get ( \"Gamepad\" ). new ( Enum . UserInputType . Gamepad1 ) Methods \u00b6 IsDown(keyCode) \u00b6 Returns true|false if the button is down. 1 2 3 if ( gamepad : IsDown ( Enum . KeyCode . ButtonA )) then print ( \"ButtonA down\" ) end IsConnected() \u00b6 Returns true|false if the gamepad is connected. GetState(keyCode) \u00b6 Returns the UserInputState of the given keycode button. 1 2 local thumbstick1 = gamepad : GetState ( Enum . KeyCode . Thumbstick1 ) print ( \"Left Thumbstick Position\" , thumbstick1 . Position ) SetMotor(motor, value) \u00b6 Sets the vibration motor on to a given value. The value should be between 0 and 1 . Setting the value to 0 will turn the motor off (which is exactly what the StopMotor method does). 1 gamepad : SetMotor ( Enum . VibrationMotor . Large , 0.75 ) StopMotor(motor) \u00b6 Stops the vibration motor. This is the same as setting the motor to a value of 0 . 1 gamepad : StopMotor ( Enum . VibrationMotor . Large ) StopAllMotors() \u00b6 Stops all motors from vibrating. 1 gamepad : StopAllMotors () IsMotorSupported(motor) \u00b6 Returns true|false whether or not the motor is supported on this gamepad. IsVibrationSupported() \u00b6 Returns true|false whether or not vibration is supported on this gamepad. GetMotorValue(motor) \u00b6 Returns the current value for the given motor. Will return a number between 0 to 1 . A value of 0 indicates that the motor is off. ApplyDeadzone(value, threshold) \u00b6 Remaps the value to ignore values under the threshold. Because it is remapped, it is not just cutting out the lower values, but interpolates the value from 0 to 1 properly outside the threshold. 1 2 3 4 5 local DEADZONE_THRESHOLD = 0.1 local thumbstick1 = gamepad : GetState ( Enum . KeyCode . Thumbstick1 ) local x = gamepad : ApplyDeadzone ( thumbstick . Position . X , DEADZONE_THRESHOLD ) local y = gamepad : ApplyDeadzone ( thumbstick . Position . Y , DEADZONE_THRESHOLD ) print ( \"Left Thumbstick Position\" , x , y ) Events \u00b6 ButtonDown \u00b6 Fires when a button is pressed down. 1 2 3 4 5 gamepad . ButtonDown : Connect ( function ( keyCode ) if ( keyCode == Enum . KeyCode . ButtonA ) then print ( \"ButtonA pressed down\" ) end end ) ButtonUp \u00b6 Fires when a button is released. 1 2 3 4 5 gamepad . ButtonUp : Connect ( function ( keyCode ) if ( keyCode == Enum . KeyCode . ButtonA ) then print ( \"ButtonA released\" ) end end ) Changed \u00b6 Fires when the input changes. 1 2 3 4 5 gamepad . Changed : Connect ( function ( keyCode , input ) if ( keyCode == Enum . KeyCode . Thumbstick1 ) then print ( \"Left Thumbstick Changed\" , input . Position ) end end ) Warning Checking for changes in analog controls can be buggy (i.e. it can fail to register when the analog stick goes back to a 0,0 position). Therefore, it is preferrable to use GetState and continuously poll the input's position. See example at the bottom of this page. Connected \u00b6 Fires when this gamepad is connected. Disconnected \u00b6 Fires when this gamepad is disconnected. Polling Example \u00b6 Continuously poll the position of the thumbstick: 1 2 3 4 5 6 local thumbstick1 = gamepad : GetState ( Enum . KeyCode . Thumbstick1 ) game : GetService ( \"RunService\" ). Heartbeat : Connect ( function () local leftThumbPos = thumbstick1 . Position print ( \"Left Thumbstick\" , leftThumbPos ) end )","title":"Gamepad"},{"location":"module_docs/client_controllers/user_inputs/gamepad/#constructor","text":"1 local gamepad = userInput : Get ( \"Gamepad\" ). new ( Enum . UserInputType . Gamepad1 )","title":"Constructor"},{"location":"module_docs/client_controllers/user_inputs/gamepad/#methods","text":"","title":"Methods"},{"location":"module_docs/client_controllers/user_inputs/gamepad/#isdownkeycode","text":"Returns true|false if the button is down. 1 2 3 if ( gamepad : IsDown ( Enum . KeyCode . ButtonA )) then print ( \"ButtonA down\" ) end","title":"IsDown(keyCode)"},{"location":"module_docs/client_controllers/user_inputs/gamepad/#isconnected","text":"Returns true|false if the gamepad is connected.","title":"IsConnected()"},{"location":"module_docs/client_controllers/user_inputs/gamepad/#getstatekeycode","text":"Returns the UserInputState of the given keycode button. 1 2 local thumbstick1 = gamepad : GetState ( Enum . KeyCode . Thumbstick1 ) print ( \"Left Thumbstick Position\" , thumbstick1 . Position )","title":"GetState(keyCode)"},{"location":"module_docs/client_controllers/user_inputs/gamepad/#setmotormotor-value","text":"Sets the vibration motor on to a given value. The value should be between 0 and 1 . Setting the value to 0 will turn the motor off (which is exactly what the StopMotor method does). 1 gamepad : SetMotor ( Enum . VibrationMotor . Large , 0.75 )","title":"SetMotor(motor, value)"},{"location":"module_docs/client_controllers/user_inputs/gamepad/#stopmotormotor","text":"Stops the vibration motor. This is the same as setting the motor to a value of 0 . 1 gamepad : StopMotor ( Enum . VibrationMotor . Large )","title":"StopMotor(motor)"},{"location":"module_docs/client_controllers/user_inputs/gamepad/#stopallmotors","text":"Stops all motors from vibrating. 1 gamepad : StopAllMotors ()","title":"StopAllMotors()"},{"location":"module_docs/client_controllers/user_inputs/gamepad/#ismotorsupportedmotor","text":"Returns true|false whether or not the motor is supported on this gamepad.","title":"IsMotorSupported(motor)"},{"location":"module_docs/client_controllers/user_inputs/gamepad/#isvibrationsupported","text":"Returns true|false whether or not vibration is supported on this gamepad.","title":"IsVibrationSupported()"},{"location":"module_docs/client_controllers/user_inputs/gamepad/#getmotorvaluemotor","text":"Returns the current value for the given motor. Will return a number between 0 to 1 . A value of 0 indicates that the motor is off.","title":"GetMotorValue(motor)"},{"location":"module_docs/client_controllers/user_inputs/gamepad/#applydeadzonevalue-threshold","text":"Remaps the value to ignore values under the threshold. Because it is remapped, it is not just cutting out the lower values, but interpolates the value from 0 to 1 properly outside the threshold. 1 2 3 4 5 local DEADZONE_THRESHOLD = 0.1 local thumbstick1 = gamepad : GetState ( Enum . KeyCode . Thumbstick1 ) local x = gamepad : ApplyDeadzone ( thumbstick . Position . X , DEADZONE_THRESHOLD ) local y = gamepad : ApplyDeadzone ( thumbstick . Position . Y , DEADZONE_THRESHOLD ) print ( \"Left Thumbstick Position\" , x , y )","title":"ApplyDeadzone(value, threshold)"},{"location":"module_docs/client_controllers/user_inputs/gamepad/#events","text":"","title":"Events"},{"location":"module_docs/client_controllers/user_inputs/gamepad/#buttondown","text":"Fires when a button is pressed down. 1 2 3 4 5 gamepad . ButtonDown : Connect ( function ( keyCode ) if ( keyCode == Enum . KeyCode . ButtonA ) then print ( \"ButtonA pressed down\" ) end end )","title":"ButtonDown"},{"location":"module_docs/client_controllers/user_inputs/gamepad/#buttonup","text":"Fires when a button is released. 1 2 3 4 5 gamepad . ButtonUp : Connect ( function ( keyCode ) if ( keyCode == Enum . KeyCode . ButtonA ) then print ( \"ButtonA released\" ) end end )","title":"ButtonUp"},{"location":"module_docs/client_controllers/user_inputs/gamepad/#changed","text":"Fires when the input changes. 1 2 3 4 5 gamepad . Changed : Connect ( function ( keyCode , input ) if ( keyCode == Enum . KeyCode . Thumbstick1 ) then print ( \"Left Thumbstick Changed\" , input . Position ) end end ) Warning Checking for changes in analog controls can be buggy (i.e. it can fail to register when the analog stick goes back to a 0,0 position). Therefore, it is preferrable to use GetState and continuously poll the input's position. See example at the bottom of this page.","title":"Changed"},{"location":"module_docs/client_controllers/user_inputs/gamepad/#connected","text":"Fires when this gamepad is connected.","title":"Connected"},{"location":"module_docs/client_controllers/user_inputs/gamepad/#disconnected","text":"Fires when this gamepad is disconnected.","title":"Disconnected"},{"location":"module_docs/client_controllers/user_inputs/gamepad/#polling-example","text":"Continuously poll the position of the thumbstick: 1 2 3 4 5 6 local thumbstick1 = gamepad : GetState ( Enum . KeyCode . Thumbstick1 ) game : GetService ( \"RunService\" ). Heartbeat : Connect ( function () local leftThumbPos = thumbstick1 . Position print ( \"Left Thumbstick\" , leftThumbPos ) end )","title":"Polling Example"},{"location":"module_docs/client_controllers/user_inputs/keyboard/","text":"The Keyboard represents the keyboard inputs for the player. Obtain Keyboard \u00b6 1 local keyboard = userInput : Get ( \"Keyboard\" ) Methods \u00b6 IsDown(keyCode) \u00b6 Returns true|false if the key is down. 1 2 3 if ( keyboard : IsDown ( Enum . KeyCode . W )) then -- W key down end AreAllDown(keyCodes...) \u00b6 Returns true|false if all keys passed are down. 1 2 3 if ( keyboard : AreAllDown ( Enum . KeyCode . W , Enum . KeyCode . LeftShift )) then -- LeftShift + W keys down end AreAnyDown(keyCodes...) \u00b6 Returns true|false if any keys passed are down. 1 2 3 if ( keyboard : AreAnyDown ( Enum . KeyCode . W , Enum . KeyCode . Up )) then -- W or Up Arrow down end Events \u00b6 KeyDown \u00b6 Fires when a key is pressed. 1 2 3 keyboard . KeyDown : Connect ( function ( keyCode ) print ( keyCode , \"down\" ) end ) KeyUp \u00b6 Fires when a key is released. 1 2 3 keyboard . KeyUp : Connect ( function ( keyCode ) print ( keyCode , \"up\" ) end )","title":"Keyboard"},{"location":"module_docs/client_controllers/user_inputs/keyboard/#obtain-keyboard","text":"1 local keyboard = userInput : Get ( \"Keyboard\" )","title":"Obtain Keyboard"},{"location":"module_docs/client_controllers/user_inputs/keyboard/#methods","text":"","title":"Methods"},{"location":"module_docs/client_controllers/user_inputs/keyboard/#isdownkeycode","text":"Returns true|false if the key is down. 1 2 3 if ( keyboard : IsDown ( Enum . KeyCode . W )) then -- W key down end","title":"IsDown(keyCode)"},{"location":"module_docs/client_controllers/user_inputs/keyboard/#arealldownkeycodes","text":"Returns true|false if all keys passed are down. 1 2 3 if ( keyboard : AreAllDown ( Enum . KeyCode . W , Enum . KeyCode . LeftShift )) then -- LeftShift + W keys down end","title":"AreAllDown(keyCodes...)"},{"location":"module_docs/client_controllers/user_inputs/keyboard/#areanydownkeycodes","text":"Returns true|false if any keys passed are down. 1 2 3 if ( keyboard : AreAnyDown ( Enum . KeyCode . W , Enum . KeyCode . Up )) then -- W or Up Arrow down end","title":"AreAnyDown(keyCodes...)"},{"location":"module_docs/client_controllers/user_inputs/keyboard/#events","text":"","title":"Events"},{"location":"module_docs/client_controllers/user_inputs/keyboard/#keydown","text":"Fires when a key is pressed. 1 2 3 keyboard . KeyDown : Connect ( function ( keyCode ) print ( keyCode , \"down\" ) end )","title":"KeyDown"},{"location":"module_docs/client_controllers/user_inputs/keyboard/#keyup","text":"Fires when a key is released. 1 2 3 keyboard . KeyUp : Connect ( function ( keyCode ) print ( keyCode , \"up\" ) end )","title":"KeyUp"},{"location":"module_docs/client_controllers/user_inputs/mobile/","text":"The Mobile module exposes events related to mobile input. Obtain Mobile \u00b6 1 local mobile = userInput : Get ( \"Mobile\" ) Methods \u00b6 GetDeviceAcceleration() \u00b6 Get the acceleration of the device. 1 local acceleration = mobile : GetDeviceAcceleration () GetDeviceGravity() \u00b6 Get the gravitational force on the device. 1 local gravity = mobile : GetDeviceGravity () GetDeviceRotation() \u00b6 Get the rotation of the device. 1 local rotation , cframe = mobile : GetDeviceRotation () Events \u00b6 TouchStarted \u00b6 Fires when a touch is started. 1 2 3 mobile . TouchStarted : Connect ( function ( screenPosition ) print ( \"TouchStarted\" , screenPosition ) end ) TouchEnded \u00b6 Fires when a touch ends. 1 2 3 mobile . TouchEnded : Connect ( function ( screenPosition ) print ( \"TouchEnded\" , screenPosition ) end ) TouchMoved \u00b6 Fires when a touch moves. 1 2 3 mobile . TouchMoved : Connect ( function ( screenPosition , deltaPosition ) print ( \"TouchMoved\" , screenPosition , deltaPosition ) end ) TouchTapInWorld \u00b6 Fires when a touch tap is registered in the 3D world. 1 2 3 mobile . TouchTapInWorld : Connect ( function ( position ) print ( \"TouchTapInWorld\" , position ) end ) TouchPinch \u00b6 Fires when a touch pinch is registered. 1 2 3 mobile . TouchPinch : Connect ( function ( touchPositions , scale , velocity , state ) print ( \"TouchPinch\" , touchPositions , scale , velocity , state ) end ) TouchLongPress \u00b6 Fires when a long press is registered. 1 2 3 mobile . TouchLongPress : Connect ( function ( touchPositions , state ) print ( \"TouchLongPress\" , touchPositions , state ) end ) TouchPan \u00b6 Fires when a pan is registered. 1 2 3 mobile . TouchPan : Connect ( function ( touchPositions , totalTranslation , velocity , state ) print ( \"TouchPan\" , touchPositions , totalTranslation , velocity , state ) end ) TouchRotate \u00b6 Fires when a rotation is registered. 1 2 3 mobile . TouchRotate : Connect ( function ( touchPositions , rotation , velocity , state ) print ( \"TouchRotate\" , touchPositions , rotation , velocity , state ) end ) TouchSwipe \u00b6 Fires when a swipe is registered. 1 2 3 mobile . TouchSwipe : Connect ( function ( swipeDirection , numberOfTouches ) print ( \"TouchSwipe\" , swipeDirection , numberOfTouches ) end ) See SwipeDirection for possible values. TouchTap \u00b6 Fires when a tap is registered. 1 2 3 mobile . TouchTap : Connect ( function ( touchPositions ) print ( \"TouchTap\" , touchPositions ) end ) DeviceAccelerationChanged \u00b6 Fires when the device's acceleration changes. 1 2 3 mobile . DeviceAccelerationChanged : Connect ( function ( acceleration ) print ( \"DeviceAccelerationChanged\" , acceleration ) end ) DeviceGravityChanged \u00b6 Fires when the device's gravitational pull changes. 1 2 3 mobile . DeviceGravityChanged : Connect ( function ( gravity ) print ( \"DeviceGravityChanged\" , gravity ) end ) DeviceRotationChanged \u00b6 Fires when the device's rotation changes. 1 2 3 mobile . DeviceRotationChanged : Connect ( function ( rotation , cframe ) print ( \"DeviceRotationChanged\" , rotation , cframe ) end )","title":"Mobile"},{"location":"module_docs/client_controllers/user_inputs/mobile/#obtain-mobile","text":"1 local mobile = userInput : Get ( \"Mobile\" )","title":"Obtain Mobile"},{"location":"module_docs/client_controllers/user_inputs/mobile/#methods","text":"","title":"Methods"},{"location":"module_docs/client_controllers/user_inputs/mobile/#getdeviceacceleration","text":"Get the acceleration of the device. 1 local acceleration = mobile : GetDeviceAcceleration ()","title":"GetDeviceAcceleration()"},{"location":"module_docs/client_controllers/user_inputs/mobile/#getdevicegravity","text":"Get the gravitational force on the device. 1 local gravity = mobile : GetDeviceGravity ()","title":"GetDeviceGravity()"},{"location":"module_docs/client_controllers/user_inputs/mobile/#getdevicerotation","text":"Get the rotation of the device. 1 local rotation , cframe = mobile : GetDeviceRotation ()","title":"GetDeviceRotation()"},{"location":"module_docs/client_controllers/user_inputs/mobile/#events","text":"","title":"Events"},{"location":"module_docs/client_controllers/user_inputs/mobile/#touchstarted","text":"Fires when a touch is started. 1 2 3 mobile . TouchStarted : Connect ( function ( screenPosition ) print ( \"TouchStarted\" , screenPosition ) end )","title":"TouchStarted"},{"location":"module_docs/client_controllers/user_inputs/mobile/#touchended","text":"Fires when a touch ends. 1 2 3 mobile . TouchEnded : Connect ( function ( screenPosition ) print ( \"TouchEnded\" , screenPosition ) end )","title":"TouchEnded"},{"location":"module_docs/client_controllers/user_inputs/mobile/#touchmoved","text":"Fires when a touch moves. 1 2 3 mobile . TouchMoved : Connect ( function ( screenPosition , deltaPosition ) print ( \"TouchMoved\" , screenPosition , deltaPosition ) end )","title":"TouchMoved"},{"location":"module_docs/client_controllers/user_inputs/mobile/#touchtapinworld","text":"Fires when a touch tap is registered in the 3D world. 1 2 3 mobile . TouchTapInWorld : Connect ( function ( position ) print ( \"TouchTapInWorld\" , position ) end )","title":"TouchTapInWorld"},{"location":"module_docs/client_controllers/user_inputs/mobile/#touchpinch","text":"Fires when a touch pinch is registered. 1 2 3 mobile . TouchPinch : Connect ( function ( touchPositions , scale , velocity , state ) print ( \"TouchPinch\" , touchPositions , scale , velocity , state ) end )","title":"TouchPinch"},{"location":"module_docs/client_controllers/user_inputs/mobile/#touchlongpress","text":"Fires when a long press is registered. 1 2 3 mobile . TouchLongPress : Connect ( function ( touchPositions , state ) print ( \"TouchLongPress\" , touchPositions , state ) end )","title":"TouchLongPress"},{"location":"module_docs/client_controllers/user_inputs/mobile/#touchpan","text":"Fires when a pan is registered. 1 2 3 mobile . TouchPan : Connect ( function ( touchPositions , totalTranslation , velocity , state ) print ( \"TouchPan\" , touchPositions , totalTranslation , velocity , state ) end )","title":"TouchPan"},{"location":"module_docs/client_controllers/user_inputs/mobile/#touchrotate","text":"Fires when a rotation is registered. 1 2 3 mobile . TouchRotate : Connect ( function ( touchPositions , rotation , velocity , state ) print ( \"TouchRotate\" , touchPositions , rotation , velocity , state ) end )","title":"TouchRotate"},{"location":"module_docs/client_controllers/user_inputs/mobile/#touchswipe","text":"Fires when a swipe is registered. 1 2 3 mobile . TouchSwipe : Connect ( function ( swipeDirection , numberOfTouches ) print ( \"TouchSwipe\" , swipeDirection , numberOfTouches ) end ) See SwipeDirection for possible values.","title":"TouchSwipe"},{"location":"module_docs/client_controllers/user_inputs/mobile/#touchtap","text":"Fires when a tap is registered. 1 2 3 mobile . TouchTap : Connect ( function ( touchPositions ) print ( \"TouchTap\" , touchPositions ) end )","title":"TouchTap"},{"location":"module_docs/client_controllers/user_inputs/mobile/#deviceaccelerationchanged","text":"Fires when the device's acceleration changes. 1 2 3 mobile . DeviceAccelerationChanged : Connect ( function ( acceleration ) print ( \"DeviceAccelerationChanged\" , acceleration ) end )","title":"DeviceAccelerationChanged"},{"location":"module_docs/client_controllers/user_inputs/mobile/#devicegravitychanged","text":"Fires when the device's gravitational pull changes. 1 2 3 mobile . DeviceGravityChanged : Connect ( function ( gravity ) print ( \"DeviceGravityChanged\" , gravity ) end )","title":"DeviceGravityChanged"},{"location":"module_docs/client_controllers/user_inputs/mobile/#devicerotationchanged","text":"Fires when the device's rotation changes. 1 2 3 mobile . DeviceRotationChanged : Connect ( function ( rotation , cframe ) print ( \"DeviceRotationChanged\" , rotation , cframe ) end )","title":"DeviceRotationChanged"},{"location":"module_docs/client_controllers/user_inputs/mouse/","text":"The Mouse object represents a player's mouse and any associated inputs. Obtain Mouse \u00b6 1 local mouse = userInput : Get ( \"Mouse\" ) Methods \u00b6 GetPosition() \u00b6 Returns a Vector2 of the mouse's screen position. GetDelta() \u00b6 Returns a Vector2 of the mouse's delta position (i.e. change in position). Warning This only works if the mouse is locked. If not locked, it will return a zero-value Vector2. Lock() \u00b6 Locks the mouse's position on-screen at its current location. LockCenter() \u00b6 Locks the mouse's position at the center of the screen. Unlock() \u00b6 Unlocks the mouse's position. GetRay(distance) \u00b6 Get a ray object from the mouse's position into the 3D world. This is mostly used internally for raycasting. GetRayFromXY(x, y) \u00b6 Get a ray object projecting from the XY screen position into the 3D world. SetMouseIcon(iconId) \u00b6 Set the mouse icon. SetMouseIconEnabled(isEnabled) \u00b6 Set whether or not the mouse icon is enabled. IsMouseIconEnabled() \u00b6 Returns true|false whether or not the mouse icon is enabled. IsButtonPressed(mouseButton) \u00b6 Returns true|false if the given mouse button is pressed (e.g. Enum.UserInputType.MouseButton1 ). Cast(ignoreInstance, terrainCellsAreCubes, ignoreWater) \u00b6 Performs a raycast operation from the mouse's position projected into the 3D world. Returns everything that workspace:FindPartOnRay returns (part, cframe, normal, material). CastWithIgnoreList(ignoreTbl, terrainCellsAreCubes, ignoreWater) \u00b6 The same as Cast , but with a given blacklist table. CastWithWhitelist(whitelistTbl, terrainCellsAreCubes, ignoreWater) \u00b6 The same as Cast , but with a given whitelist table. Events \u00b6 LeftDown \u00b6 The left button was pressed down. LeftUp \u00b6 The left button was released. RightDown \u00b6 The right button was pressed down. RightUp \u00b6 The right button was released. MiddleDown \u00b6 The middle button was pressed down. MiddleUp \u00b6 The middle button was released. Moved \u00b6 The mouse has moved. 1 2 3 mouse . Moved : Connect ( function () print ( \"The mouse moved\" ) end ) Scrolled \u00b6 Mouse wheel scrolled. Passes the increment of scrolling performed. 1 2 3 mouse . Scrolled : Connect ( function ( amount ) print ( \"Scrolled\" , amount ) end )","title":"Mouse"},{"location":"module_docs/client_controllers/user_inputs/mouse/#obtain-mouse","text":"1 local mouse = userInput : Get ( \"Mouse\" )","title":"Obtain Mouse"},{"location":"module_docs/client_controllers/user_inputs/mouse/#methods","text":"","title":"Methods"},{"location":"module_docs/client_controllers/user_inputs/mouse/#getposition","text":"Returns a Vector2 of the mouse's screen position.","title":"GetPosition()"},{"location":"module_docs/client_controllers/user_inputs/mouse/#getdelta","text":"Returns a Vector2 of the mouse's delta position (i.e. change in position). Warning This only works if the mouse is locked. If not locked, it will return a zero-value Vector2.","title":"GetDelta()"},{"location":"module_docs/client_controllers/user_inputs/mouse/#lock","text":"Locks the mouse's position on-screen at its current location.","title":"Lock()"},{"location":"module_docs/client_controllers/user_inputs/mouse/#lockcenter","text":"Locks the mouse's position at the center of the screen.","title":"LockCenter()"},{"location":"module_docs/client_controllers/user_inputs/mouse/#unlock","text":"Unlocks the mouse's position.","title":"Unlock()"},{"location":"module_docs/client_controllers/user_inputs/mouse/#getraydistance","text":"Get a ray object from the mouse's position into the 3D world. This is mostly used internally for raycasting.","title":"GetRay(distance)"},{"location":"module_docs/client_controllers/user_inputs/mouse/#getrayfromxyx-y","text":"Get a ray object projecting from the XY screen position into the 3D world.","title":"GetRayFromXY(x, y)"},{"location":"module_docs/client_controllers/user_inputs/mouse/#setmouseiconiconid","text":"Set the mouse icon.","title":"SetMouseIcon(iconId)"},{"location":"module_docs/client_controllers/user_inputs/mouse/#setmouseiconenabledisenabled","text":"Set whether or not the mouse icon is enabled.","title":"SetMouseIconEnabled(isEnabled)"},{"location":"module_docs/client_controllers/user_inputs/mouse/#ismouseiconenabled","text":"Returns true|false whether or not the mouse icon is enabled.","title":"IsMouseIconEnabled()"},{"location":"module_docs/client_controllers/user_inputs/mouse/#isbuttonpressedmousebutton","text":"Returns true|false if the given mouse button is pressed (e.g. Enum.UserInputType.MouseButton1 ).","title":"IsButtonPressed(mouseButton)"},{"location":"module_docs/client_controllers/user_inputs/mouse/#castignoreinstance-terraincellsarecubes-ignorewater","text":"Performs a raycast operation from the mouse's position projected into the 3D world. Returns everything that workspace:FindPartOnRay returns (part, cframe, normal, material).","title":"Cast(ignoreInstance, terrainCellsAreCubes, ignoreWater)"},{"location":"module_docs/client_controllers/user_inputs/mouse/#castwithignorelistignoretbl-terraincellsarecubes-ignorewater","text":"The same as Cast , but with a given blacklist table.","title":"CastWithIgnoreList(ignoreTbl, terrainCellsAreCubes, ignoreWater)"},{"location":"module_docs/client_controllers/user_inputs/mouse/#castwithwhitelistwhitelisttbl-terraincellsarecubes-ignorewater","text":"The same as Cast , but with a given whitelist table.","title":"CastWithWhitelist(whitelistTbl, terrainCellsAreCubes, ignoreWater)"},{"location":"module_docs/client_controllers/user_inputs/mouse/#events","text":"","title":"Events"},{"location":"module_docs/client_controllers/user_inputs/mouse/#leftdown","text":"The left button was pressed down.","title":"LeftDown"},{"location":"module_docs/client_controllers/user_inputs/mouse/#leftup","text":"The left button was released.","title":"LeftUp"},{"location":"module_docs/client_controllers/user_inputs/mouse/#rightdown","text":"The right button was pressed down.","title":"RightDown"},{"location":"module_docs/client_controllers/user_inputs/mouse/#rightup","text":"The right button was released.","title":"RightUp"},{"location":"module_docs/client_controllers/user_inputs/mouse/#middledown","text":"The middle button was pressed down.","title":"MiddleDown"},{"location":"module_docs/client_controllers/user_inputs/mouse/#middleup","text":"The middle button was released.","title":"MiddleUp"},{"location":"module_docs/client_controllers/user_inputs/mouse/#moved","text":"The mouse has moved. 1 2 3 mouse . Moved : Connect ( function () print ( \"The mouse moved\" ) end )","title":"Moved"},{"location":"module_docs/client_controllers/user_inputs/mouse/#scrolled","text":"Mouse wheel scrolled. Passes the increment of scrolling performed. 1 2 3 mouse . Scrolled : Connect ( function ( amount ) print ( \"Scrolled\" , amount ) end )","title":"Scrolled"},{"location":"module_docs/client_modules/camera_shaker/","text":"Adding realistic camera shaking can be a challenge, but the CameraShaker module makes it easy. This module, as well as documentation, is also available in the RbxCameraShaker GitHub repository. Note The CameraShaker code was ported from the EZ Camera Shake asset from Unity's asset store, developed by Road Turtle Games. The original developer and asset are no longer around, but originally gave written permission to port the asset to Roblox. There was no licensing information provided. Constructor \u00b6 new(RenderPriority priority, Function callback) \u00b6 Constructs a new CameraShaker instance. The RenderPriority dictates when the callback function will execute (exactly the same as binding a function to RenderStep). Typically this should be placed at a value after the camera will have been updated. A way to think of the camera shaker is an additional \"layer\" to the camera system. The shaker adds a new effects layer to the camera. 1 2 3 4 local cam = workspace . CurrentCamera local camShake = CameraShaker . new ( Enum . RenderPriority . Camera . Value + 1 , function ( cframe ) cam . CFrame = cam . CFrame * cframe end ) Tip While the CameraShaker is targeted toward shaking the camera, it can be used to make any in-game object shake. For instance, a CameraShaker could be used to shake a model. Static Properties \u00b6 CameraShakeInstance \u00b6 A reference to the CameraShakeInstance class, which is used to construct an individual shake. The CameraShaker can have many CameraShakeInstances applied to it at one time. Presets \u00b6 A table of preset CameraShakeInstances . The presets are: Name Best used as sustained Bump No Explosion No Earthquake Yes GentleSway Yes BadTrip Yes HandheldCamera Yes Vibration Yes RoughDriving Yes Methods \u00b6 Start() \u00b6 Starts the CameraShaker. 1 camShake : Start () Stop() \u00b6 Stops the CameraShaker. 1 camShake : Stop () StopSustained([Number fadeOutTime]) \u00b6 Stops any sustained shakes on the shaker instance. If no fade-out time is provided, it will use the fade-out time provided by the shake instance itself. 1 camShake : StopSustained () Shake(ShakeInstance shakeInstance) \u00b6 Invokes a single shake instance. 1 camShake : Shake ( CameraShaker . Presets . Explosion ) ShakeSustain(ShakeInstance shakeInstance) \u00b6 Invokes a single shake instance, and sustains the shake indefinitely. 1 camShake : ShakeSustain ( CameraShaker . Presets . Earthquake ) Creating Custom Shakes \u00b6 Custom shakes can be created by creating new CameraShakeInstance objects: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 local CameraShakeInstance = CameraShaker . CameraShakeInstance local bump = CameraShakeInstance . new ( 2.5 , -- Magnitude (how far the camera can move) 4 , -- Roughness (how fast the camera can move) 0.1 , -- Fade-in time (how long it takes to reach full magnitude) 0.75 -- Fade-out time (how long it takes to fade out to no shaking) ) -- How far the position can moved (but will be multiplied by the magnitude): bump . PositionInfluence = Vector3 . new ( 0.15 , 0.15 , 0.15 ) -- How much rotation is allowed (in degrees; also multiplied by magnitude): bump . RotationInfluence = Vector3 . new ( 1 , 1 , 1 ) -- Apply the shake: camShake : Shake ( bump )","title":"CameraShaker"},{"location":"module_docs/client_modules/camera_shaker/#constructor","text":"","title":"Constructor"},{"location":"module_docs/client_modules/camera_shaker/#newrenderpriority-priority-function-callback","text":"Constructs a new CameraShaker instance. The RenderPriority dictates when the callback function will execute (exactly the same as binding a function to RenderStep). Typically this should be placed at a value after the camera will have been updated. A way to think of the camera shaker is an additional \"layer\" to the camera system. The shaker adds a new effects layer to the camera. 1 2 3 4 local cam = workspace . CurrentCamera local camShake = CameraShaker . new ( Enum . RenderPriority . Camera . Value + 1 , function ( cframe ) cam . CFrame = cam . CFrame * cframe end ) Tip While the CameraShaker is targeted toward shaking the camera, it can be used to make any in-game object shake. For instance, a CameraShaker could be used to shake a model.","title":"new(RenderPriority priority, Function callback)"},{"location":"module_docs/client_modules/camera_shaker/#static-properties","text":"","title":"Static Properties"},{"location":"module_docs/client_modules/camera_shaker/#camerashakeinstance","text":"A reference to the CameraShakeInstance class, which is used to construct an individual shake. The CameraShaker can have many CameraShakeInstances applied to it at one time.","title":"CameraShakeInstance"},{"location":"module_docs/client_modules/camera_shaker/#presets","text":"A table of preset CameraShakeInstances . The presets are: Name Best used as sustained Bump No Explosion No Earthquake Yes GentleSway Yes BadTrip Yes HandheldCamera Yes Vibration Yes RoughDriving Yes","title":"Presets"},{"location":"module_docs/client_modules/camera_shaker/#methods","text":"","title":"Methods"},{"location":"module_docs/client_modules/camera_shaker/#start","text":"Starts the CameraShaker. 1 camShake : Start ()","title":"Start()"},{"location":"module_docs/client_modules/camera_shaker/#stop","text":"Stops the CameraShaker. 1 camShake : Stop ()","title":"Stop()"},{"location":"module_docs/client_modules/camera_shaker/#stopsustainednumber-fadeouttime","text":"Stops any sustained shakes on the shaker instance. If no fade-out time is provided, it will use the fade-out time provided by the shake instance itself. 1 camShake : StopSustained ()","title":"StopSustained([Number fadeOutTime])"},{"location":"module_docs/client_modules/camera_shaker/#shakeshakeinstance-shakeinstance","text":"Invokes a single shake instance. 1 camShake : Shake ( CameraShaker . Presets . Explosion )","title":"Shake(ShakeInstance shakeInstance)"},{"location":"module_docs/client_modules/camera_shaker/#shakesustainshakeinstance-shakeinstance","text":"Invokes a single shake instance, and sustains the shake indefinitely. 1 camShake : ShakeSustain ( CameraShaker . Presets . Earthquake )","title":"ShakeSustain(ShakeInstance shakeInstance)"},{"location":"module_docs/client_modules/camera_shaker/#creating-custom-shakes","text":"Custom shakes can be created by creating new CameraShakeInstance objects: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 local CameraShakeInstance = CameraShaker . CameraShakeInstance local bump = CameraShakeInstance . new ( 2.5 , -- Magnitude (how far the camera can move) 4 , -- Roughness (how fast the camera can move) 0.1 , -- Fade-in time (how long it takes to reach full magnitude) 0.75 -- Fade-out time (how long it takes to fade out to no shaking) ) -- How far the position can moved (but will be multiplied by the magnitude): bump . PositionInfluence = Vector3 . new ( 0.15 , 0.15 , 0.15 ) -- How much rotation is allowed (in degrees; also multiplied by magnitude): bump . RotationInfluence = Vector3 . new ( 1 , 1 , 1 ) -- Apply the shake: camShake : Shake ( bump )","title":"Creating Custom Shakes"},{"location":"module_docs/client_modules/pid/","text":"PID stands for Proportional-Integral-Derivative. It is common practice to use a PID Controller (like this one) to calculate the desired output to meet a certain setpoint or target. For instance, a car's cruise control setting might use a PID Controller to calculate the necessary acceleration needed to go from the current speed to the desired speed. Constructor \u00b6 new(Number kp, Number ki, Number kd) \u00b6 Constructs a new PID instance. 1 local pid = PID . new ( 0.01 , 0.01 , - 0.01 ) Methods \u00b6 SetInput(Number input, [ Boolean clampMinMax]) \u00b6 Set the current input for the PID. 1 pid : SetInput ( car . Velocity . Magnitude ) SetTarget(Number target, [ Boolean clampMinMax]) \u00b6 Set the target value for the PID. 1 pid : SetTarget ( desiredCarSpeed ) Compute() \u00b6 Compute the new value. 1 local acceleration = pid : Compute () SetTunings(Number kp, Number ki, Number kd) \u00b6 Tune the PID. Setting the correct values for a PID controller can be very tricky and will take some time to learn and understand for each application. 1 pid : SetTunings ( 0.1 , 0.01 , 0 ) SetSampleTime(Number sampleTimeMilliseconds) \u00b6 Set how frequently (in milliseconds) the Compute method is allowed to actually calculate a new value. If Compute is called within this range, it will simply use the last value calculated. Lower sample times will be more accurate, but may hurt performance under heavy load. SetOutputLimits(Number min, Number max) \u00b6 Set the output limit range. The output will be clamped between min and max . 1 pid : SetOutputLimits ( 0 , 10 ) ClearOutputLimits() \u00b6 Clears the output limits. With no limits, the output will not be restricted to any range. This is the default. 1 pid : ClearOutputLimits () Run(Function callbackBefore, Function callbackAfter) \u00b6 Run the PID continuously on a Heartbeat loop. Two callbacks are used: One for pre-computation, and one for post-computation. In the pre-computation step (i.e. callbackBefore ), it is best to adjust the target and input. In the post-computation step (i.e. callbackAfter ), the calculated value will be passed along and can be used. 1 2 3 4 5 6 7 8 9 pid : Run ( function () pid : SetInput ( carSpeed ) pid : SetTarget ( carDesiredSpeed ) end , function ( accel ) car : SetAcceleration ( accel ) end ) Stop() \u00b6 Stops the running PID. 1 pid : Stop () Pause() \u00b6 Pauses the running PID. 1 pid : Pause () Resume() \u00b6 Resumes the paused PID. 1 pid : Resume () Clone() \u00b6 Clones the PID. 1 local pid2 = pid : Clone () Example \u00b6 1 2 3 4 5 6 7 8 9 10 11 local pid = PID . new ( 0.01 , 0.01 , - 0.01 ) pid : Run ( function () pid : SetInput ( currentSpeed ) pid : SetTarget ( desiredSpeed ) end , function ( output ) car : SetAcceleration ( output ) end )","title":"PID"},{"location":"module_docs/client_modules/pid/#constructor","text":"","title":"Constructor"},{"location":"module_docs/client_modules/pid/#newnumber-kp-number-ki-number-kd","text":"Constructs a new PID instance. 1 local pid = PID . new ( 0.01 , 0.01 , - 0.01 )","title":"new(Number kp, Number ki, Number kd)"},{"location":"module_docs/client_modules/pid/#methods","text":"","title":"Methods"},{"location":"module_docs/client_modules/pid/#setinputnumber-input-boolean-clampminmax","text":"Set the current input for the PID. 1 pid : SetInput ( car . Velocity . Magnitude )","title":"SetInput(Number input, [ Boolean clampMinMax])"},{"location":"module_docs/client_modules/pid/#settargetnumber-target-boolean-clampminmax","text":"Set the target value for the PID. 1 pid : SetTarget ( desiredCarSpeed )","title":"SetTarget(Number target, [ Boolean clampMinMax])"},{"location":"module_docs/client_modules/pid/#compute","text":"Compute the new value. 1 local acceleration = pid : Compute ()","title":"Compute()"},{"location":"module_docs/client_modules/pid/#settuningsnumber-kp-number-ki-number-kd","text":"Tune the PID. Setting the correct values for a PID controller can be very tricky and will take some time to learn and understand for each application. 1 pid : SetTunings ( 0.1 , 0.01 , 0 )","title":"SetTunings(Number kp, Number ki, Number kd)"},{"location":"module_docs/client_modules/pid/#setsampletimenumber-sampletimemilliseconds","text":"Set how frequently (in milliseconds) the Compute method is allowed to actually calculate a new value. If Compute is called within this range, it will simply use the last value calculated. Lower sample times will be more accurate, but may hurt performance under heavy load.","title":"SetSampleTime(Number sampleTimeMilliseconds)"},{"location":"module_docs/client_modules/pid/#setoutputlimitsnumber-min-number-max","text":"Set the output limit range. The output will be clamped between min and max . 1 pid : SetOutputLimits ( 0 , 10 )","title":"SetOutputLimits(Number min, Number max)"},{"location":"module_docs/client_modules/pid/#clearoutputlimits","text":"Clears the output limits. With no limits, the output will not be restricted to any range. This is the default. 1 pid : ClearOutputLimits ()","title":"ClearOutputLimits()"},{"location":"module_docs/client_modules/pid/#runfunction-callbackbefore-function-callbackafter","text":"Run the PID continuously on a Heartbeat loop. Two callbacks are used: One for pre-computation, and one for post-computation. In the pre-computation step (i.e. callbackBefore ), it is best to adjust the target and input. In the post-computation step (i.e. callbackAfter ), the calculated value will be passed along and can be used. 1 2 3 4 5 6 7 8 9 pid : Run ( function () pid : SetInput ( carSpeed ) pid : SetTarget ( carDesiredSpeed ) end , function ( accel ) car : SetAcceleration ( accel ) end )","title":"Run(Function callbackBefore, Function callbackAfter)"},{"location":"module_docs/client_modules/pid/#stop","text":"Stops the running PID. 1 pid : Stop ()","title":"Stop()"},{"location":"module_docs/client_modules/pid/#pause","text":"Pauses the running PID. 1 pid : Pause ()","title":"Pause()"},{"location":"module_docs/client_modules/pid/#resume","text":"Resumes the paused PID. 1 pid : Resume ()","title":"Resume()"},{"location":"module_docs/client_modules/pid/#clone","text":"Clones the PID. 1 local pid2 = pid : Clone ()","title":"Clone()"},{"location":"module_docs/client_modules/pid/#example","text":"1 2 3 4 5 6 7 8 9 10 11 local pid = PID . new ( 0.01 , 0.01 , - 0.01 ) pid : Run ( function () pid : SetInput ( currentSpeed ) pid : SetTarget ( desiredSpeed ) end , function ( output ) car : SetAcceleration ( output ) end )","title":"Example"},{"location":"module_docs/client_modules/smooth/","text":"The Smooth module allows for silky-smooth movements. It is great for camera damping and smooth movement effects. The underlying concept is to feed the Smooth object a Vector3 goal, and the algorithm will smoothly move toward that goal. Constructor \u00b6 Smooth.new(Vector3 initialValue, Number smoothTime) \u00b6 Constructs a new Smooth object. The initialValue is the starting point for the smoother, and the smoothTime is the amount of time it takes for the algorithm to reach its goal. 1 local smooth = Smooth . new ( Vector3 . new (), 0.1 ) Tip Keep the smoothTime as low as possible. While smoothing effects are fun to make, the players will be annoyed by transitions and movements that are too slow. Methods \u00b6 Update([Vector3 goal]) \u00b6 Calculate the new value based on the goal. 1 2 3 4 5 6 -- Continuously update the 'goal' to be the mouse's position & -- move 'part' to the new calculated position: runService : BindToRenderStep ( \"Example\" , 0 , function () local position = smooth : Update ( mouse . Hit . Position ) part . Position = position end ) UpdateAngle([Vector3 goal]) \u00b6 The same as Update , but will wrap the value around Tau (2\u03c0), which is a full circle in radians. This is necessary if the Smooth object is being used to calculate any sort of rotation (e.g. camera rotation). 1 2 -- Inside RenderStep or Heartbeat loop: local rotVector = smooth : UpdateAngle ( newRotationVector ) SetMaxSpeed(Number speed) \u00b6 Set the max speed at which the smoothing algorithm can travel. By default, there is no maximum speed. 1 2 -- Limit speed to 10 studs per second: smooth : SetMaxSpeed ( 10 ) GetMaxSpeed() \u00b6 Gets the max speed set for the smoothing algorithm. 1 local maxSpeed = smooth : GetMaxSpeed () Properties \u00b6 Value \u00b6 The current Vector3 value calculated by the smoothing algorithm. Goal \u00b6 The current Vector3 goal that the smoothing algorithm is moving toward. SmoothTime \u00b6 The time it takes for the smoothing algorithm to reach the goal. Example \u00b6 1 2 3 4 5 6 7 8 -- Move 'part' smoothly toward the mouse: local smoothPosition = Smooth . new ( part . Position , 0.5 ) runService : BindToRenderStep ( \"Example\" , 0 , function () local position = smoothPosition : Update ( mouse . Hit . Position ) part . Position = position end )","title":"Smooth"},{"location":"module_docs/client_modules/smooth/#constructor","text":"","title":"Constructor"},{"location":"module_docs/client_modules/smooth/#smoothnewvector3-initialvalue-number-smoothtime","text":"Constructs a new Smooth object. The initialValue is the starting point for the smoother, and the smoothTime is the amount of time it takes for the algorithm to reach its goal. 1 local smooth = Smooth . new ( Vector3 . new (), 0.1 ) Tip Keep the smoothTime as low as possible. While smoothing effects are fun to make, the players will be annoyed by transitions and movements that are too slow.","title":"Smooth.new(Vector3 initialValue, Number smoothTime)"},{"location":"module_docs/client_modules/smooth/#methods","text":"","title":"Methods"},{"location":"module_docs/client_modules/smooth/#updatevector3-goal","text":"Calculate the new value based on the goal. 1 2 3 4 5 6 -- Continuously update the 'goal' to be the mouse's position & -- move 'part' to the new calculated position: runService : BindToRenderStep ( \"Example\" , 0 , function () local position = smooth : Update ( mouse . Hit . Position ) part . Position = position end )","title":"Update([Vector3 goal])"},{"location":"module_docs/client_modules/smooth/#updateanglevector3-goal","text":"The same as Update , but will wrap the value around Tau (2\u03c0), which is a full circle in radians. This is necessary if the Smooth object is being used to calculate any sort of rotation (e.g. camera rotation). 1 2 -- Inside RenderStep or Heartbeat loop: local rotVector = smooth : UpdateAngle ( newRotationVector )","title":"UpdateAngle([Vector3 goal])"},{"location":"module_docs/client_modules/smooth/#setmaxspeednumber-speed","text":"Set the max speed at which the smoothing algorithm can travel. By default, there is no maximum speed. 1 2 -- Limit speed to 10 studs per second: smooth : SetMaxSpeed ( 10 )","title":"SetMaxSpeed(Number speed)"},{"location":"module_docs/client_modules/smooth/#getmaxspeed","text":"Gets the max speed set for the smoothing algorithm. 1 local maxSpeed = smooth : GetMaxSpeed ()","title":"GetMaxSpeed()"},{"location":"module_docs/client_modules/smooth/#properties","text":"","title":"Properties"},{"location":"module_docs/client_modules/smooth/#value","text":"The current Vector3 value calculated by the smoothing algorithm.","title":"Value"},{"location":"module_docs/client_modules/smooth/#goal","text":"The current Vector3 goal that the smoothing algorithm is moving toward.","title":"Goal"},{"location":"module_docs/client_modules/smooth/#smoothtime","text":"The time it takes for the smoothing algorithm to reach the goal.","title":"SmoothTime"},{"location":"module_docs/client_modules/smooth/#example","text":"1 2 3 4 5 6 7 8 -- Move 'part' smoothly toward the mouse: local smoothPosition = Smooth . new ( part . Position , 0.5 ) runService : BindToRenderStep ( \"Example\" , 0 , function () local position = smoothPosition : Update ( mouse . Hit . Position ) part . Position = position end )","title":"Example"},{"location":"module_docs/client_modules/tween/","text":"The Tween module is an abstraction of the built-in Tween object. The benefit of this module is that a function can be bound to the tweening process, thus allowing developers to easily customize how a tween will work (e.g. tweening multiple objects instead of just one). Constructors \u00b6 FromService(Instance object, TweenInfo info, Table properties) \u00b6 Simply a shortcut for TweenService:Create() . new(TweenInfo info, Function callback) \u00b6 Creates a new custom Tween object. While the returned tween object is custom-built, it reflects the same methods and events as the default Tween object. Therefore, refer to the documentation for that object for using the tween. When the tween is played, the callback function will be called for every frame (using RenderStep internally), and will pass along the tween value to the function. The value is typically a value between 0 and 1, but can be outside that range for particular easing functions. Returns: Tween 1 2 3 4 local tweenInfo = TweenInfo . new ( 1 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ) local tween = Tween . new ( info , function ( n ) print ( n ) end ) Methods \u00b6 Play() \u00b6 Start or resume the tween. 1 tween : Play () Pause() \u00b6 Pause the tween. 1 tween : Pause () Cancel() \u00b6 Cancel the tween. 1 tween : Cancel () Events \u00b6 Completed(PlaybackState state) \u00b6 Fired when the tween is completed and passes along the PlaybackState . PlaybackStateChanged(PlaybackState state) \u00b6 Fired when the PlaybackState changes. Properties \u00b6 TweenInfo \u00b6 The TweenInfo assigned to this tween. Callback \u00b6 The callback function assigned to this tween. PlaybackState \u00b6 The current PlaybackState of this tween.","title":"Tween"},{"location":"module_docs/client_modules/tween/#constructors","text":"","title":"Constructors"},{"location":"module_docs/client_modules/tween/#fromserviceinstance-object-tweeninfo-info-table-properties","text":"Simply a shortcut for TweenService:Create() .","title":"FromService(Instance object, TweenInfo info, Table properties)"},{"location":"module_docs/client_modules/tween/#newtweeninfo-info-function-callback","text":"Creates a new custom Tween object. While the returned tween object is custom-built, it reflects the same methods and events as the default Tween object. Therefore, refer to the documentation for that object for using the tween. When the tween is played, the callback function will be called for every frame (using RenderStep internally), and will pass along the tween value to the function. The value is typically a value between 0 and 1, but can be outside that range for particular easing functions. Returns: Tween 1 2 3 4 local tweenInfo = TweenInfo . new ( 1 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ) local tween = Tween . new ( info , function ( n ) print ( n ) end )","title":"new(TweenInfo info, Function callback)"},{"location":"module_docs/client_modules/tween/#methods","text":"","title":"Methods"},{"location":"module_docs/client_modules/tween/#play","text":"Start or resume the tween. 1 tween : Play ()","title":"Play()"},{"location":"module_docs/client_modules/tween/#pause","text":"Pause the tween. 1 tween : Pause ()","title":"Pause()"},{"location":"module_docs/client_modules/tween/#cancel","text":"Cancel the tween. 1 tween : Cancel ()","title":"Cancel()"},{"location":"module_docs/client_modules/tween/#events","text":"","title":"Events"},{"location":"module_docs/client_modules/tween/#completedplaybackstate-state","text":"Fired when the tween is completed and passes along the PlaybackState .","title":"Completed(PlaybackState state)"},{"location":"module_docs/client_modules/tween/#playbackstatechangedplaybackstate-state","text":"Fired when the PlaybackState changes.","title":"PlaybackStateChanged(PlaybackState state)"},{"location":"module_docs/client_modules/tween/#properties","text":"","title":"Properties"},{"location":"module_docs/client_modules/tween/#tweeninfo","text":"The TweenInfo assigned to this tween.","title":"TweenInfo"},{"location":"module_docs/client_modules/tween/#callback","text":"The callback function assigned to this tween.","title":"Callback"},{"location":"module_docs/client_modules/tween/#playbackstate","text":"The current PlaybackState of this tween.","title":"PlaybackState"},{"location":"module_docs/server_modules/profile_service/","text":"ProfileService is a third-party DataStore management module provided by Mad Studio. As quoted from the GitHub page for ProfileService: ProfileService is a stand-alone ModuleScript that specializes in loading and auto-saving DataStore profiles. A DataStore Profile (Later referred to as just Profile) is a set of data which is meant to be loaded up only once inside a Roblox server and then written to and read from locally on that server (With no delays associated with talking with the DataStore every time data changes) whilst being periodically auto-saved and saved immediately once after the server finishes working with the Profile. Please refer to the official documentation for more info. To use ProfileService in AGF, simply reference the module as such: 1 2 3 function MyService : Start () local ProfileService = self . Modules . ProfileService end","title":"ProfileService"},{"location":"module_docs/shared/base64/","text":"The Base64 module allows for easy encoding and decoding of Base64 values. Constructor \u00b6 Base64.new() \u00b6 Constructs a new Base64 object. 1 local b64 = Base64 . new () Methods \u00b6 Encode(String str) \u00b6 Encodes the string into Base64 format. 1 2 local encoded = b64 : Encode ( \"Hello world\" ) print ( encoded ) --> SGVsbG8gd29ybGQ= Decode(String encodedStr) \u00b6 Decodes the string from Base64 format. 1 2 local decoded = b64 : Decode ( \"SGVsbG8gd29ybGQ=\" ) print ( decoded ) --> Hello world","title":"Base64"},{"location":"module_docs/shared/base64/#constructor","text":"","title":"Constructor"},{"location":"module_docs/shared/base64/#base64new","text":"Constructs a new Base64 object. 1 local b64 = Base64 . new ()","title":"Base64.new()"},{"location":"module_docs/shared/base64/#methods","text":"","title":"Methods"},{"location":"module_docs/shared/base64/#encodestring-str","text":"Encodes the string into Base64 format. 1 2 local encoded = b64 : Encode ( \"Hello world\" ) print ( encoded ) --> SGVsbG8gd29ybGQ=","title":"Encode(String str)"},{"location":"module_docs/shared/base64/#decodestring-encodedstr","text":"Decodes the string from Base64 format. 1 2 local decoded = b64 : Decode ( \"SGVsbG8gd29ybGQ=\" ) print ( decoded ) --> Hello world","title":"Decode(String encodedStr)"},{"location":"module_docs/shared/date/","text":"The Date module allows for easy description of time. It is modeled after the JavaScript Date object. Constructors \u00b6 Date.new([Number seconds [, Boolean useUTC]]) \u00b6 Date.fromJSON(String jsonString) \u00b6 1 2 local date = Date . new () -- Date as of right now local date = Date . new ( 1578329690 , true ) -- Date as of January 6, 2020, 4:55PM Methods \u00b6 ToJSON() \u00b6 Converts the Date object to a JSON string. 1 local jsonDate = date : ToJSON () ToSeconds() \u00b6 Returns the number of seconds representing the object. This is the most practical method to use for saving/serializing the date, since it has the smallest footprint. 1 local seconds = date : ToSeconds () GetTimezoneHourOffset() \u00b6 Get the timezone offset in hours. 1 2 local timezoneHourOffset = date : GetTimezoneHourOffset () print ( \"Timezone offset in hours:\" , timezoneHourOffset ) --> e.g. 5 Format(String format) \u00b6 Format the date string. See the GNU Date Commands for relevant formats. 1 2 3 local date = Date . new () local format = date : Format ( \"%B %d, %Y\" ) print ( format ) --> e.g. January 6, 2020 ToUTC() \u00b6 Constructs and returns a new Date object with the time converted to UTC . 1 2 local localTime = Date . new () local utcTime = localTime : ToUTC () ToLocal() \u00b6 Constructs and returns a new Date object with the time converted from UTC time into local time. 1 2 local utcTime = Date . new (): ToUTC () local localTime = utcTime : ToLocal () ToISOString() \u00b6 Returns the ISO string representation of the date. 1 print ( date : ToISOString ()) --> e.g. 2020-01-06T17:08:24.473 ToDateString() \u00b6 Returns a string representing the shorthand date. 1 print ( date : ToDateString ()) --> e.g. Mon Jan 6 2020 ToTimeString() \u00b6 Returns a string representing the time. 1 print ( date : ToTimeString ()) --> e.g. 17:10:28 ToString() \u00b6 Returns a string representing the time and date combined. 1 2 3 4 print ( date : ToString ()) --> e.g. Mon Jan 6 2020 17:10:28 -- Also works with tostring: print ( tostring ( date )) Properties \u00b6 Hour \u00b6 The hour of the day. Minute \u00b6 The minute of the day. Weekday \u00b6 The numeric weekday. Day \u00b6 The day of the month. Month \u00b6 The numeric month. Year \u00b6 The year. Second \u00b6 The seconds since January 1, 1970. Millisecond \u00b6 The milliseconds since January 1, 1970. Yearday \u00b6 The day of the year. IsDST \u00b6 Whether or not the date represents daylight saving time. Operators \u00b6 Simple comparison operators can be used on dates. 1 2 3 4 5 6 local date1 = Date . new ( 0 ) local date2 = Date . new ( 100 ) local date3 = Date . new ( 100 ) print ( date1 < date2 ) --> true print ( date1 >= date2 ) --> false print ( date2 == date3 ) --> true","title":"Date"},{"location":"module_docs/shared/date/#constructors","text":"","title":"Constructors"},{"location":"module_docs/shared/date/#datenewnumber-seconds-boolean-useutc","text":"","title":"Date.new([Number seconds [, Boolean useUTC]])"},{"location":"module_docs/shared/date/#datefromjsonstring-jsonstring","text":"1 2 local date = Date . new () -- Date as of right now local date = Date . new ( 1578329690 , true ) -- Date as of January 6, 2020, 4:55PM","title":"Date.fromJSON(String jsonString)"},{"location":"module_docs/shared/date/#methods","text":"","title":"Methods"},{"location":"module_docs/shared/date/#tojson","text":"Converts the Date object to a JSON string. 1 local jsonDate = date : ToJSON ()","title":"ToJSON()"},{"location":"module_docs/shared/date/#toseconds","text":"Returns the number of seconds representing the object. This is the most practical method to use for saving/serializing the date, since it has the smallest footprint. 1 local seconds = date : ToSeconds ()","title":"ToSeconds()"},{"location":"module_docs/shared/date/#gettimezonehouroffset","text":"Get the timezone offset in hours. 1 2 local timezoneHourOffset = date : GetTimezoneHourOffset () print ( \"Timezone offset in hours:\" , timezoneHourOffset ) --> e.g. 5","title":"GetTimezoneHourOffset()"},{"location":"module_docs/shared/date/#formatstring-format","text":"Format the date string. See the GNU Date Commands for relevant formats. 1 2 3 local date = Date . new () local format = date : Format ( \"%B %d, %Y\" ) print ( format ) --> e.g. January 6, 2020","title":"Format(String format)"},{"location":"module_docs/shared/date/#toutc","text":"Constructs and returns a new Date object with the time converted to UTC . 1 2 local localTime = Date . new () local utcTime = localTime : ToUTC ()","title":"ToUTC()"},{"location":"module_docs/shared/date/#tolocal","text":"Constructs and returns a new Date object with the time converted from UTC time into local time. 1 2 local utcTime = Date . new (): ToUTC () local localTime = utcTime : ToLocal ()","title":"ToLocal()"},{"location":"module_docs/shared/date/#toisostring","text":"Returns the ISO string representation of the date. 1 print ( date : ToISOString ()) --> e.g. 2020-01-06T17:08:24.473","title":"ToISOString()"},{"location":"module_docs/shared/date/#todatestring","text":"Returns a string representing the shorthand date. 1 print ( date : ToDateString ()) --> e.g. Mon Jan 6 2020","title":"ToDateString()"},{"location":"module_docs/shared/date/#totimestring","text":"Returns a string representing the time. 1 print ( date : ToTimeString ()) --> e.g. 17:10:28","title":"ToTimeString()"},{"location":"module_docs/shared/date/#tostring","text":"Returns a string representing the time and date combined. 1 2 3 4 print ( date : ToString ()) --> e.g. Mon Jan 6 2020 17:10:28 -- Also works with tostring: print ( tostring ( date ))","title":"ToString()"},{"location":"module_docs/shared/date/#properties","text":"","title":"Properties"},{"location":"module_docs/shared/date/#hour","text":"The hour of the day.","title":"Hour"},{"location":"module_docs/shared/date/#minute","text":"The minute of the day.","title":"Minute"},{"location":"module_docs/shared/date/#weekday","text":"The numeric weekday.","title":"Weekday"},{"location":"module_docs/shared/date/#day","text":"The day of the month.","title":"Day"},{"location":"module_docs/shared/date/#month","text":"The numeric month.","title":"Month"},{"location":"module_docs/shared/date/#year","text":"The year.","title":"Year"},{"location":"module_docs/shared/date/#second","text":"The seconds since January 1, 1970.","title":"Second"},{"location":"module_docs/shared/date/#millisecond","text":"The milliseconds since January 1, 1970.","title":"Millisecond"},{"location":"module_docs/shared/date/#yearday","text":"The day of the year.","title":"Yearday"},{"location":"module_docs/shared/date/#isdst","text":"Whether or not the date represents daylight saving time.","title":"IsDST"},{"location":"module_docs/shared/date/#operators","text":"Simple comparison operators can be used on dates. 1 2 3 4 5 6 local date1 = Date . new ( 0 ) local date2 = Date . new ( 100 ) local date3 = Date . new ( 100 ) print ( date1 < date2 ) --> true print ( date1 >= date2 ) --> false print ( date2 == date3 ) --> true","title":"Operators"},{"location":"module_docs/shared/listener_list/","text":"The ListenerList allows developers to keep a list of connections that can all be disconnected at the same time. This is useful when creating custom objects that need to be destroyed and cleaned up. Constructor \u00b6 ListenerList.new() \u00b6 Creates a new ListenerList instance. 1 local listenerList = ListenerList . new () Methods \u00b6 Connect(event, func) \u00b6 Connect to an event. Returns: Connection 1 2 3 listenerList : Connect ( workspace . Changed , function ( property ) print ( \"Workspace property \" .. property .. \" changed\" ) end ) BindToRenderStep(name, priority, func) \u00b6 Exactly the same as RunService:BindToRenderStep . See documentation there. 1 2 3 listenerList : BindToRenderStep ( \"R\" , Enum . RenderPriority . Camera . Value , function () -- Render step end ) BindAction(name, func, btn [, inputTypes...]) \u00b6 The same as ContextActionService:BindAction . BindActionAtPriority(name, func, btn, priority [, inputTypes...]) \u00b6 The same as ContextActionService:BindActionAtPriority . DisconnectAll() \u00b6 Disconnect all events, and unbind both RenderStep and Action bindings. 1 listenerList : DisconnectAll () DisconnectEvents() \u00b6 Only disconnect events in the list. DisconnectRenderSteps() \u00b6 Only unbind any bound RenderSteps. DisconnectActions() \u00b6 Only unbind any bound actions. Destroy() \u00b6 Alias for DisconnectAll .","title":"ListenerList"},{"location":"module_docs/shared/listener_list/#constructor","text":"","title":"Constructor"},{"location":"module_docs/shared/listener_list/#listenerlistnew","text":"Creates a new ListenerList instance. 1 local listenerList = ListenerList . new ()","title":"ListenerList.new()"},{"location":"module_docs/shared/listener_list/#methods","text":"","title":"Methods"},{"location":"module_docs/shared/listener_list/#connectevent-func","text":"Connect to an event. Returns: Connection 1 2 3 listenerList : Connect ( workspace . Changed , function ( property ) print ( \"Workspace property \" .. property .. \" changed\" ) end )","title":"Connect(event, func)"},{"location":"module_docs/shared/listener_list/#bindtorenderstepname-priority-func","text":"Exactly the same as RunService:BindToRenderStep . See documentation there. 1 2 3 listenerList : BindToRenderStep ( \"R\" , Enum . RenderPriority . Camera . Value , function () -- Render step end )","title":"BindToRenderStep(name, priority, func)"},{"location":"module_docs/shared/listener_list/#bindactionname-func-btn-inputtypes","text":"The same as ContextActionService:BindAction .","title":"BindAction(name, func, btn [, inputTypes...])"},{"location":"module_docs/shared/listener_list/#bindactionatpriorityname-func-btn-priority-inputtypes","text":"The same as ContextActionService:BindActionAtPriority .","title":"BindActionAtPriority(name, func, btn, priority [, inputTypes...])"},{"location":"module_docs/shared/listener_list/#disconnectall","text":"Disconnect all events, and unbind both RenderStep and Action bindings. 1 listenerList : DisconnectAll ()","title":"DisconnectAll()"},{"location":"module_docs/shared/listener_list/#disconnectevents","text":"Only disconnect events in the list.","title":"DisconnectEvents()"},{"location":"module_docs/shared/listener_list/#disconnectrendersteps","text":"Only unbind any bound RenderSteps.","title":"DisconnectRenderSteps()"},{"location":"module_docs/shared/listener_list/#disconnectactions","text":"Only unbind any bound actions.","title":"DisconnectActions()"},{"location":"module_docs/shared/listener_list/#destroy","text":"Alias for DisconnectAll .","title":"Destroy()"},{"location":"module_docs/shared/maid/","text":"The Maid class lets you easily watch and clean up objects, events, and other tasks. Written by Quenty , this class has proven itself worthy in some of Roblox's most successful games. Constructor \u00b6 Maid.new() \u00b6 Creates a new Maid instance. 1 local maid = Maid . new () Methods \u00b6 GiveTask(task) \u00b6 Stores a task. The task can be an event connection, an instance or table with a Destroy method, or a function. When the maid's DoCleaning or Destroy method is invoked, these tasks will be cleaned up. Events will be disconnected, instances will be destroyed, and functions will be called. 1 2 3 maid : GiveTask ( myModel ) maid : GiveTask ( workspace . ChildAdded : Connect ( function ( obj ) end )) maid : GiveTask ( function () end ) Returns: number index of the task. GivePromise(promise) \u00b6 Stores a promise. If the maid is cleaned up and the promise is not completed, the promise will be cancelled. 1 2 3 4 maid : GivePromise ( Promise . Async ( function ( resolve , reject ) wait ( 5 ) resolve () end )) Returns: Promise DoCleaning() \u00b6 Cleans up all the tasks. Event connections will be disconnected, instances will be destroyed, and functions will be called. 1 maid : DoCleaning () Destroy() \u00b6 Alias for DoCleaning . 1 maid : Destroy ()","title":"Maid"},{"location":"module_docs/shared/maid/#constructor","text":"","title":"Constructor"},{"location":"module_docs/shared/maid/#maidnew","text":"Creates a new Maid instance. 1 local maid = Maid . new ()","title":"Maid.new()"},{"location":"module_docs/shared/maid/#methods","text":"","title":"Methods"},{"location":"module_docs/shared/maid/#givetasktask","text":"Stores a task. The task can be an event connection, an instance or table with a Destroy method, or a function. When the maid's DoCleaning or Destroy method is invoked, these tasks will be cleaned up. Events will be disconnected, instances will be destroyed, and functions will be called. 1 2 3 maid : GiveTask ( myModel ) maid : GiveTask ( workspace . ChildAdded : Connect ( function ( obj ) end )) maid : GiveTask ( function () end ) Returns: number index of the task.","title":"GiveTask(task)"},{"location":"module_docs/shared/maid/#givepromisepromise","text":"Stores a promise. If the maid is cleaned up and the promise is not completed, the promise will be cancelled. 1 2 3 4 maid : GivePromise ( Promise . Async ( function ( resolve , reject ) wait ( 5 ) resolve () end )) Returns: Promise","title":"GivePromise(promise)"},{"location":"module_docs/shared/maid/#docleaning","text":"Cleans up all the tasks. Event connections will be disconnected, instances will be destroyed, and functions will be called. 1 maid : DoCleaning ()","title":"DoCleaning()"},{"location":"module_docs/shared/maid/#destroy","text":"Alias for DoCleaning . 1 maid : Destroy ()","title":"Destroy()"},{"location":"module_docs/shared/number_util/","text":"The NumberUtil module provides utility functions for Lua numbers. E \u00b6 The irrational number e. 1 NumberUtil . E == 2.7182818284590 Tau \u00b6 Equal to 2\u03c0 . 1 NumberUtil . Tau == 6.2831853071796 Lerp(min, max, alpha) \u00b6 Interpolate between two numbers by a certain alpha/percentage. The name \"lerp\" comes from combining l inear int erp olation . Visually, think of a number line ranging from 'min' to 'max' and then move along that line by 'alpha' percent. 1 2 3 4 NumberUtil . Lerp ( 5 , 15 , 0.5 ) == 10 NumberUtil . Lerp ( 5 , 15 , 0 ) == 5 NumberUtil . Lerp ( 5 , 15 , 0.7 ) == 12 NumberUtil . Lerp ( 5 , 15 , 2 ) == 25 LerpClamp(min, max, alpha) \u00b6 The same as Lerp, except alpha is clamped between the range of [0, 1] . This helps avoid the resultant number being out of the input range of [min, max] . 1 2 NumberUtil . LerpClamp ( 5 , 15 , 0.5 ) == 10 NumberUtil . LerpClamp ( 5 , 15 , 2 ) == 15 -- 'alpha' clamped to 1. InverseLerp(min, max, num) \u00b6 The inverse of the Lerp function. It returns the alpha value between the range of [min, max] given the num . 1 2 NumberUtil . InverseLerp ( 5 , 15 , 10 ) == 0.5 NumberUtil . InverseLerp ( 5 , 15 , 12 ) == 0.7 Map(n, inMin, inMax, outMin, outMax) \u00b6 Remaps the range of 'num' from its old range of [inMin, inMax] to a new range of [outMin, outMax] . This is useful when needing to convert a range of inputs to a different output. For instance, remapping gamepad stick input to a larger range controlling a vehicle steering wheel. Mathematically, this is done by doing an inverse lerp with n on [inMin, inMax] to get the correct alpha value, and then lerping that alpha value with the range of [outMin, outMax] . 1 2 NumberUtil . Map ( 0.5 , 0 , 1 , - 10 , 10 ) == 0 NumberUtil . Map ( 1 , - 1 , 1 , 0 , 5 ) == 5 Round(num) \u00b6 Rounds a number to the nearest whole number. Internally, this uses the math.floor and math.ceil Lua math functions to round the number. 1 2 3 NumberUtil . Round ( 1.5 ) == 2 NumberUtil . Round ( 3.2 ) == 3 NumberUtil . Round ( - 0.5 ) == - 1 RoundTo(num, multiple) \u00b6 Rounds a number to the nearest given multiple. An example would be locking world positions onto a larger grid. 1 2 NumberUtil . RoundTo ( 3.4 , 5 ) == 5 NumberUtil . RoundTo ( 12 , 5 ) == 10","title":"NumberUtil"},{"location":"module_docs/shared/number_util/#e","text":"The irrational number e. 1 NumberUtil . E == 2.7182818284590","title":"E"},{"location":"module_docs/shared/number_util/#tau","text":"Equal to 2\u03c0 . 1 NumberUtil . Tau == 6.2831853071796","title":"Tau"},{"location":"module_docs/shared/number_util/#lerpmin-max-alpha","text":"Interpolate between two numbers by a certain alpha/percentage. The name \"lerp\" comes from combining l inear int erp olation . Visually, think of a number line ranging from 'min' to 'max' and then move along that line by 'alpha' percent. 1 2 3 4 NumberUtil . Lerp ( 5 , 15 , 0.5 ) == 10 NumberUtil . Lerp ( 5 , 15 , 0 ) == 5 NumberUtil . Lerp ( 5 , 15 , 0.7 ) == 12 NumberUtil . Lerp ( 5 , 15 , 2 ) == 25","title":"Lerp(min, max, alpha)"},{"location":"module_docs/shared/number_util/#lerpclampmin-max-alpha","text":"The same as Lerp, except alpha is clamped between the range of [0, 1] . This helps avoid the resultant number being out of the input range of [min, max] . 1 2 NumberUtil . LerpClamp ( 5 , 15 , 0.5 ) == 10 NumberUtil . LerpClamp ( 5 , 15 , 2 ) == 15 -- 'alpha' clamped to 1.","title":"LerpClamp(min, max, alpha)"},{"location":"module_docs/shared/number_util/#inverselerpmin-max-num","text":"The inverse of the Lerp function. It returns the alpha value between the range of [min, max] given the num . 1 2 NumberUtil . InverseLerp ( 5 , 15 , 10 ) == 0.5 NumberUtil . InverseLerp ( 5 , 15 , 12 ) == 0.7","title":"InverseLerp(min, max, num)"},{"location":"module_docs/shared/number_util/#mapn-inmin-inmax-outmin-outmax","text":"Remaps the range of 'num' from its old range of [inMin, inMax] to a new range of [outMin, outMax] . This is useful when needing to convert a range of inputs to a different output. For instance, remapping gamepad stick input to a larger range controlling a vehicle steering wheel. Mathematically, this is done by doing an inverse lerp with n on [inMin, inMax] to get the correct alpha value, and then lerping that alpha value with the range of [outMin, outMax] . 1 2 NumberUtil . Map ( 0.5 , 0 , 1 , - 10 , 10 ) == 0 NumberUtil . Map ( 1 , - 1 , 1 , 0 , 5 ) == 5","title":"Map(n, inMin, inMax, outMin, outMax)"},{"location":"module_docs/shared/number_util/#roundnum","text":"Rounds a number to the nearest whole number. Internally, this uses the math.floor and math.ceil Lua math functions to round the number. 1 2 3 NumberUtil . Round ( 1.5 ) == 2 NumberUtil . Round ( 3.2 ) == 3 NumberUtil . Round ( - 0.5 ) == - 1","title":"Round(num)"},{"location":"module_docs/shared/number_util/#roundtonum-multiple","text":"Rounds a number to the nearest given multiple. An example would be locking world positions onto a larger grid. 1 2 NumberUtil . RoundTo ( 3.4 , 5 ) == 5 NumberUtil . RoundTo ( 12 , 5 ) == 10","title":"RoundTo(num, multiple)"},{"location":"module_docs/shared/promise/","text":"AGF uses evaera's Promise implementation . See the documentation for that implementation. A few modifications have been made to the Promise object for AGF. Most notably, PascalCase mappings have been added for all public methods, as well as simplified versions. For instance, the andThen method has a mapping to both AndThen as well as Then . This has been done to match the PascalCase styling of AGF. The below documentation favors the PascalCase methods. However, the original camelCase methods still exist. Static Methods \u00b6 Promise.new(Function callback) \u00b6 Create a new promise object. The callback receives a 'resolve', 'reject', and onCancel function that can then be called within the function. Call resolve when the task has completed successfully. Call reject if something went wrong. Optionally, pass an cancellation handler to the onCancel function, which will be called if the promise gets cancelled. This can be used to stop whatever task is occurring within the promise. Read the official documentation for more information. 1 2 3 4 5 6 7 local promise = Promise . new ( function ( resolve , reject , onCancel ) if thisThingWorked () then resolve () else reject ( \"It didn't work\" ) end end ) Promise.Defer(Function callback) \u00b6 Same as Promise.new , but will begin execution after a Heartbeat event. Promise.Promisify(Function callback) \u00b6 Creates a promise wrapper for a yielding function. Promise.Resolve(...) \u00b6 Creates an immediately-resolved promise with the given value. Promise.Reject(...) \u00b6 Creates an immediately-rejected promise with the given value. Promise.Try(...) \u00b6 Starts a promise chain and turns synchronous errors into rejections. Promise.All(Table promises) \u00b6 Creates a new promise with a list of other promises. It is resolved once all promises in the table are resolved, and is rejected if even one of the promises is rejected. This is a great method when multiple requests need to be made at the same time but do not depend on each other. Promise.AllSettled(Table promises) \u00b6 Creates a new promise with a list of other promises. It is resolved once all promises in the table are settled (i.e. after all Finally calls on each promise have been made). Promise.Race(Table promises) \u00b6 Resolves or rejects on the first promise to resolve or reject. All other promises will be cancelled. Promise.Some(Table promises, Number amount) \u00b6 Resolves once the amount number of promises have resolved. All other promises will be cancelled. Promise.Any(Table promises) \u00b6 Resolves if any of the promises resolve, and will reject if all promises are rejected. All other promises will be cancelled. Promise.Delay(Number seconds) \u00b6 Creates a promise that resolves after the number of seconds has elapsed. Promise.Each(Table promises, Function predicate) \u00b6 Promise.Retry(callback, numRetries) \u00b6 The callback is a function that returns a Promise. It will continue to call the callback numRetries times until the promise resolves. If the amount of times exceeds numRetries , then the last rejected promise will be returned. Promise.FromEvent(event [, predicate]) \u00b6 Wraps an event with a Promise which is resolved the next time the event is fired. Promise.Is(Any object) \u00b6 Checks to see if the passed object is a Promise. Object Methods \u00b6 Then(Function success, Function failure) \u00b6 Catch(Function failure) \u00b6 Tap(Function tap) \u00b6 Finally(Function finally) \u00b6 Done(Function done) \u00b6 ThenCall(Function callback, ...) \u00b6 FinallyCall(Function callback, ...) \u00b6 DoneCall(Function callback, ...) \u00b6 ThenReturn(...) \u00b6 FinallyReturn(...) \u00b6 DoneReturn(...) \u00b6 Timeout(Number seconds, Variant timeoutValue) \u00b6 Cancel() \u00b6 Await() \u00b6 AwaitStatus() \u00b6 Expect(...) \u00b6 GetStatus() \u00b6 Properties \u00b6 Status \u00b6 The PromiseStatus of the promise Types \u00b6 PromiseStatus \u00b6 Possible values: Started, Resolved, Rejected, Cancelled","title":"Promise"},{"location":"module_docs/shared/promise/#static-methods","text":"","title":"Static Methods"},{"location":"module_docs/shared/promise/#promisenewfunction-callback","text":"Create a new promise object. The callback receives a 'resolve', 'reject', and onCancel function that can then be called within the function. Call resolve when the task has completed successfully. Call reject if something went wrong. Optionally, pass an cancellation handler to the onCancel function, which will be called if the promise gets cancelled. This can be used to stop whatever task is occurring within the promise. Read the official documentation for more information. 1 2 3 4 5 6 7 local promise = Promise . new ( function ( resolve , reject , onCancel ) if thisThingWorked () then resolve () else reject ( \"It didn't work\" ) end end )","title":"Promise.new(Function callback)"},{"location":"module_docs/shared/promise/#promisedeferfunction-callback","text":"Same as Promise.new , but will begin execution after a Heartbeat event.","title":"Promise.Defer(Function callback)"},{"location":"module_docs/shared/promise/#promisepromisifyfunction-callback","text":"Creates a promise wrapper for a yielding function.","title":"Promise.Promisify(Function callback)"},{"location":"module_docs/shared/promise/#promiseresolve","text":"Creates an immediately-resolved promise with the given value.","title":"Promise.Resolve(...)"},{"location":"module_docs/shared/promise/#promisereject","text":"Creates an immediately-rejected promise with the given value.","title":"Promise.Reject(...)"},{"location":"module_docs/shared/promise/#promisetry","text":"Starts a promise chain and turns synchronous errors into rejections.","title":"Promise.Try(...)"},{"location":"module_docs/shared/promise/#promisealltable-promises","text":"Creates a new promise with a list of other promises. It is resolved once all promises in the table are resolved, and is rejected if even one of the promises is rejected. This is a great method when multiple requests need to be made at the same time but do not depend on each other.","title":"Promise.All(Table promises)"},{"location":"module_docs/shared/promise/#promiseallsettledtable-promises","text":"Creates a new promise with a list of other promises. It is resolved once all promises in the table are settled (i.e. after all Finally calls on each promise have been made).","title":"Promise.AllSettled(Table promises)"},{"location":"module_docs/shared/promise/#promiseracetable-promises","text":"Resolves or rejects on the first promise to resolve or reject. All other promises will be cancelled.","title":"Promise.Race(Table promises)"},{"location":"module_docs/shared/promise/#promisesometable-promises-number-amount","text":"Resolves once the amount number of promises have resolved. All other promises will be cancelled.","title":"Promise.Some(Table promises, Number amount)"},{"location":"module_docs/shared/promise/#promiseanytable-promises","text":"Resolves if any of the promises resolve, and will reject if all promises are rejected. All other promises will be cancelled.","title":"Promise.Any(Table promises)"},{"location":"module_docs/shared/promise/#promisedelaynumber-seconds","text":"Creates a promise that resolves after the number of seconds has elapsed.","title":"Promise.Delay(Number seconds)"},{"location":"module_docs/shared/promise/#promiseeachtable-promises-function-predicate","text":"","title":"Promise.Each(Table promises, Function predicate)"},{"location":"module_docs/shared/promise/#promiseretrycallback-numretries","text":"The callback is a function that returns a Promise. It will continue to call the callback numRetries times until the promise resolves. If the amount of times exceeds numRetries , then the last rejected promise will be returned.","title":"Promise.Retry(callback, numRetries)"},{"location":"module_docs/shared/promise/#promisefromeventevent-predicate","text":"Wraps an event with a Promise which is resolved the next time the event is fired.","title":"Promise.FromEvent(event [, predicate])"},{"location":"module_docs/shared/promise/#promiseisany-object","text":"Checks to see if the passed object is a Promise.","title":"Promise.Is(Any object)"},{"location":"module_docs/shared/promise/#object-methods","text":"","title":"Object Methods"},{"location":"module_docs/shared/promise/#thenfunction-success-function-failure","text":"","title":"Then(Function success, Function failure)"},{"location":"module_docs/shared/promise/#catchfunction-failure","text":"","title":"Catch(Function failure)"},{"location":"module_docs/shared/promise/#tapfunction-tap","text":"","title":"Tap(Function tap)"},{"location":"module_docs/shared/promise/#finallyfunction-finally","text":"","title":"Finally(Function finally)"},{"location":"module_docs/shared/promise/#donefunction-done","text":"","title":"Done(Function done)"},{"location":"module_docs/shared/promise/#thencallfunction-callback","text":"","title":"ThenCall(Function callback, ...)"},{"location":"module_docs/shared/promise/#finallycallfunction-callback","text":"","title":"FinallyCall(Function callback, ...)"},{"location":"module_docs/shared/promise/#donecallfunction-callback","text":"","title":"DoneCall(Function callback, ...)"},{"location":"module_docs/shared/promise/#thenreturn","text":"","title":"ThenReturn(...)"},{"location":"module_docs/shared/promise/#finallyreturn","text":"","title":"FinallyReturn(...)"},{"location":"module_docs/shared/promise/#donereturn","text":"","title":"DoneReturn(...)"},{"location":"module_docs/shared/promise/#timeoutnumber-seconds-variant-timeoutvalue","text":"","title":"Timeout(Number seconds, Variant timeoutValue)"},{"location":"module_docs/shared/promise/#cancel","text":"","title":"Cancel()"},{"location":"module_docs/shared/promise/#await","text":"","title":"Await()"},{"location":"module_docs/shared/promise/#awaitstatus","text":"","title":"AwaitStatus()"},{"location":"module_docs/shared/promise/#expect","text":"","title":"Expect(...)"},{"location":"module_docs/shared/promise/#getstatus","text":"","title":"GetStatus()"},{"location":"module_docs/shared/promise/#properties","text":"","title":"Properties"},{"location":"module_docs/shared/promise/#status","text":"The PromiseStatus of the promise","title":"Status"},{"location":"module_docs/shared/promise/#types","text":"","title":"Types"},{"location":"module_docs/shared/promise/#promisestatus","text":"Possible values: Started, Resolved, Rejected, Cancelled","title":"PromiseStatus"},{"location":"module_docs/shared/signal/","text":"Allows the creation of custom events. Constructor \u00b6 Signal.new() \u00b6 Creates a new Signal object. 1 local signal = Signal . new () Methods \u00b6 Fire(Variant args...) \u00b6 Fire the event with any number of arguments. 1 signal : Fire ( \"Hello world\" ) Wait() \u00b6 Yields until the next time the event is fired, and returns anything that the fired event passed. 1 local message = signal : Wait () WaitPromise() \u00b6 Returns a Promise that resolves when the event fires next. 1 2 3 signal : WaitPromise (): Then ( function ( message ) print ( message ) end ) Connect(Function handler) \u00b6 Connects a function to the event. The function will be called every time the event is fired. Returns: Connection 1 2 3 signal : Connect ( function ( message ) print ( \"Event fired! Got message:\" , message ) end ) DisconnectAll() \u00b6 Disconnects all connected functions. 1 signal : DisconnectAll () Destroy() \u00b6 Destroys the event, which also disconnects all connections. 1 signal : Destroy ()","title":"Signal"},{"location":"module_docs/shared/signal/#constructor","text":"","title":"Constructor"},{"location":"module_docs/shared/signal/#signalnew","text":"Creates a new Signal object. 1 local signal = Signal . new ()","title":"Signal.new()"},{"location":"module_docs/shared/signal/#methods","text":"","title":"Methods"},{"location":"module_docs/shared/signal/#firevariant-args","text":"Fire the event with any number of arguments. 1 signal : Fire ( \"Hello world\" )","title":"Fire(Variant args...)"},{"location":"module_docs/shared/signal/#wait","text":"Yields until the next time the event is fired, and returns anything that the fired event passed. 1 local message = signal : Wait ()","title":"Wait()"},{"location":"module_docs/shared/signal/#waitpromise","text":"Returns a Promise that resolves when the event fires next. 1 2 3 signal : WaitPromise (): Then ( function ( message ) print ( message ) end )","title":"WaitPromise()"},{"location":"module_docs/shared/signal/#connectfunction-handler","text":"Connects a function to the event. The function will be called every time the event is fired. Returns: Connection 1 2 3 signal : Connect ( function ( message ) print ( \"Event fired! Got message:\" , message ) end )","title":"Connect(Function handler)"},{"location":"module_docs/shared/signal/#disconnectall","text":"Disconnects all connected functions. 1 signal : DisconnectAll ()","title":"DisconnectAll()"},{"location":"module_docs/shared/signal/#destroy","text":"Destroys the event, which also disconnects all connections. 1 signal : Destroy ()","title":"Destroy()"},{"location":"module_docs/shared/string_util/","text":"The StringUtil module provides utility functions for Lua strings. Trim(String str) \u00b6 Trims whitespace from the start and end of the string. 1 StringUtil . Trim ( \" hello world \" ) == \"hello world\" TrimStart(String str) \u00b6 The same as Trim, but only trims the start of the string. 1 StringUtil . TrimStart ( \" hello world \" ) == \"hello world \" TrimEnd(String str) \u00b6 The same as Trim, but only trims the end of the string. 1 StringUtil . TrimEnd ( \" hello world \" ) == \" hello world\" EqualsIgnoreCase(String str, String compare) \u00b6 Checks if two strings are equal, but ignores their case. 1 StringUtil . EqualsIgnoreCase ( \"HELLo woRLD\" , \"hEllo wORLd\" ) == true RemoveWhitespace(String str) \u00b6 Removes all whitespace from a string. 1 StringUtil . RemoveWhitespace ( \" hello World! \\n \" ) == \"helloWorld!\" RemoveExcessWhitespace(String str) \u00b6 Replaces all whitespace with a single space. This does not trim the string. 1 StringUtil . RemoveExcessWhitespace ( \"This is a \\n test\" ) == \"This is a test\" EndsWith(String str, String endsWith) \u00b6 Checks if a string ends with a certain string. 1 StringUtil . EndsWith ( \"Hello world\" , \"rld\" ) == true StartsWith(String str, String startsWith) \u00b6 Checks if a string starts with a certain string. 1 StringUtil . StartsWith ( \"Hello world\" , \"He\" ) == true Contains(String str, String contains) \u00b6 Checks if a string contains another string. 1 StringUtil . Contains ( \"Hello world\" , \"lo wor\" ) == true ToCharArray(String str) \u00b6 Returns a table of all the characters in the string. 1 StringUtil . ToCharArray ( \"Hello\" ) >>> { \"H\" , \"e\" , \"l\" , \"l\" , \"o\" } ToByteArray(String str) \u00b6 Returns a table of all the bytes of each character in the string. 1 StringUtil . ToByteArray ( \"Hello\" ) >>> { 72 , 101 , 108 , 108 , 111 } ByteArrayToString(Table bytes) \u00b6 Transforms an array of bytes into a string. 1 StringUtil . ByteArrayToString ({ 97 , 98 , 99 }) == \"abc\" ToCamelCase(String str) \u00b6 Returns a string in camelCase. 1 StringUtil . ToCamelCase ( \"Hello_world-abc\" ) == \"helloWorldAbc\" ToPascalCase(String str) \u00b6 Returns a string in PascalCase. 1 StringUtil . ToPascalCase ( \"Hello_world-abc\" ) == \"HelloWorldAbc\" ToSnakeCase(String str [, uppercase]) \u00b6 Returns a string in snake_case or SNAKE_CASE. 1 2 StringUtil . ToPascalCase ( \"Hello_world-abc\" ) == \"hello_world_abc\" StringUtil . ToPascalCase ( \"Hello_world-abc\" , true ) == \"HELLO_WORLD_ABC\" ToKebabCase(String str [, uppercase]) \u00b6 Returns a string in kebab-case or KEBAB-CASE. 1 2 StringUtil . ToKebabCase ( \"Hello_world-abc\" ) == \"hello-world-abc\" StringUtil . ToKebabCase ( \"Hello_world-abc\" , true ) == \"HELLO-WORLD-ABC\" Escape(str) \u00b6 Escapes a string from pattern characters. In other words, it prefixes any special pattern characters with a %. For example, the dollar sign $ would become %$. See the example below. 1 StringUtil . Escape ( \"Hello. World$ ^-^\" ) == \"Hello%. World%$ %^%-%^\" StringBuilder() \u00b6 Creates a StringBuilder object that can be used to build a string. This is useful when a large string needs to be concatenated. Traditional concatenation of a string using \"..\" can be a performance issue, and thus StringBuilders can be used to store the pieces of the string in a table and then concatenate them all at once. 1 2 3 4 5 6 local builder = StringUtil . StringBuilder () builder : Append ( \"world\" ) builder : Prepend ( \"Hello \" ) builder : ToString () == \"Hello world\" tostring ( builder ) == \"Hello world\"","title":"StringUtil"},{"location":"module_docs/shared/string_util/#trimstring-str","text":"Trims whitespace from the start and end of the string. 1 StringUtil . Trim ( \" hello world \" ) == \"hello world\"","title":"Trim(String str)"},{"location":"module_docs/shared/string_util/#trimstartstring-str","text":"The same as Trim, but only trims the start of the string. 1 StringUtil . TrimStart ( \" hello world \" ) == \"hello world \"","title":"TrimStart(String str)"},{"location":"module_docs/shared/string_util/#trimendstring-str","text":"The same as Trim, but only trims the end of the string. 1 StringUtil . TrimEnd ( \" hello world \" ) == \" hello world\"","title":"TrimEnd(String str)"},{"location":"module_docs/shared/string_util/#equalsignorecasestring-str-string-compare","text":"Checks if two strings are equal, but ignores their case. 1 StringUtil . EqualsIgnoreCase ( \"HELLo woRLD\" , \"hEllo wORLd\" ) == true","title":"EqualsIgnoreCase(String str, String compare)"},{"location":"module_docs/shared/string_util/#removewhitespacestring-str","text":"Removes all whitespace from a string. 1 StringUtil . RemoveWhitespace ( \" hello World! \\n \" ) == \"helloWorld!\"","title":"RemoveWhitespace(String str)"},{"location":"module_docs/shared/string_util/#removeexcesswhitespacestring-str","text":"Replaces all whitespace with a single space. This does not trim the string. 1 StringUtil . RemoveExcessWhitespace ( \"This is a \\n test\" ) == \"This is a test\"","title":"RemoveExcessWhitespace(String str)"},{"location":"module_docs/shared/string_util/#endswithstring-str-string-endswith","text":"Checks if a string ends with a certain string. 1 StringUtil . EndsWith ( \"Hello world\" , \"rld\" ) == true","title":"EndsWith(String str, String endsWith)"},{"location":"module_docs/shared/string_util/#startswithstring-str-string-startswith","text":"Checks if a string starts with a certain string. 1 StringUtil . StartsWith ( \"Hello world\" , \"He\" ) == true","title":"StartsWith(String str, String startsWith)"},{"location":"module_docs/shared/string_util/#containsstring-str-string-contains","text":"Checks if a string contains another string. 1 StringUtil . Contains ( \"Hello world\" , \"lo wor\" ) == true","title":"Contains(String str, String contains)"},{"location":"module_docs/shared/string_util/#tochararraystring-str","text":"Returns a table of all the characters in the string. 1 StringUtil . ToCharArray ( \"Hello\" ) >>> { \"H\" , \"e\" , \"l\" , \"l\" , \"o\" }","title":"ToCharArray(String str)"},{"location":"module_docs/shared/string_util/#tobytearraystring-str","text":"Returns a table of all the bytes of each character in the string. 1 StringUtil . ToByteArray ( \"Hello\" ) >>> { 72 , 101 , 108 , 108 , 111 }","title":"ToByteArray(String str)"},{"location":"module_docs/shared/string_util/#bytearraytostringtable-bytes","text":"Transforms an array of bytes into a string. 1 StringUtil . ByteArrayToString ({ 97 , 98 , 99 }) == \"abc\"","title":"ByteArrayToString(Table bytes)"},{"location":"module_docs/shared/string_util/#tocamelcasestring-str","text":"Returns a string in camelCase. 1 StringUtil . ToCamelCase ( \"Hello_world-abc\" ) == \"helloWorldAbc\"","title":"ToCamelCase(String str)"},{"location":"module_docs/shared/string_util/#topascalcasestring-str","text":"Returns a string in PascalCase. 1 StringUtil . ToPascalCase ( \"Hello_world-abc\" ) == \"HelloWorldAbc\"","title":"ToPascalCase(String str)"},{"location":"module_docs/shared/string_util/#tosnakecasestring-str-uppercase","text":"Returns a string in snake_case or SNAKE_CASE. 1 2 StringUtil . ToPascalCase ( \"Hello_world-abc\" ) == \"hello_world_abc\" StringUtil . ToPascalCase ( \"Hello_world-abc\" , true ) == \"HELLO_WORLD_ABC\"","title":"ToSnakeCase(String str [, uppercase])"},{"location":"module_docs/shared/string_util/#tokebabcasestring-str-uppercase","text":"Returns a string in kebab-case or KEBAB-CASE. 1 2 StringUtil . ToKebabCase ( \"Hello_world-abc\" ) == \"hello-world-abc\" StringUtil . ToKebabCase ( \"Hello_world-abc\" , true ) == \"HELLO-WORLD-ABC\"","title":"ToKebabCase(String str [, uppercase])"},{"location":"module_docs/shared/string_util/#escapestr","text":"Escapes a string from pattern characters. In other words, it prefixes any special pattern characters with a %. For example, the dollar sign $ would become %$. See the example below. 1 StringUtil . Escape ( \"Hello. World$ ^-^\" ) == \"Hello%. World%$ %^%-%^\"","title":"Escape(str)"},{"location":"module_docs/shared/string_util/#stringbuilder","text":"Creates a StringBuilder object that can be used to build a string. This is useful when a large string needs to be concatenated. Traditional concatenation of a string using \"..\" can be a performance issue, and thus StringBuilders can be used to store the pieces of the string in a table and then concatenate them all at once. 1 2 3 4 5 6 local builder = StringUtil . StringBuilder () builder : Append ( \"world\" ) builder : Prepend ( \"Hello \" ) builder : ToString () == \"Hello world\" tostring ( builder ) == \"Hello world\"","title":"StringBuilder()"},{"location":"module_docs/shared/table_util/","text":"The TableUtil module provides utility functions for Lua tables. Copy(Table tbl) \u00b6 Creates and returns a deep copy of the given table. 1 2 local tbl = { \"a\" , \"b\" , \"c\" , { \"x\" , \"y\" , \"z\" }} local tblCopy = TableUtil . Copy ( tbl ) CopyShallow(Table tbl) \u00b6 Creates and returns a shallow copy of the given table. 1 2 local tbl = { \"a\" , \"b\" , \"c\" } local tblCopy = TableUtil . Copy ( tbl ) Sync(Table tbl, Table templateTbl) \u00b6 Synchronizes a table to the template table. If the table does not have an item that exists within the template, it gets added. If the table has something that the template doesn't have, it gets removed. 1 2 3 4 local tbl1 = { kills = 0 ; deaths = 0 ; points = 0 } local tbl2 = { points = 0 } TableUtil . Sync ( tbl2 , tbl1 ) -- Synchronize table2 to table1 print ( tbl2 . deaths ) Print(Table tbl, String label, Boolean deepPrint) \u00b6 Prints the table to the output. This is useful for debugging tables. 1 2 local tbl = { a = 32 ; b = 64 ; c = 128 ; d = { x = 0 ; y = 1 ; z = 2 }} TableUtil . Print ( tbl , \"My Table\" , true ) Warning This method does not detect cyclical tables. Passing a cyclical table will result in a stackoverflow. FastRemove(Table tbl, Number index) \u00b6 Removes an item at index in the table tbl . Instead of using table.remove , this simply grabs the last item in the table and places it at the given index and trims off the last item. This is significantly faster than table.remove because it runs in O(1) , whereas table.remove is O(N) . 1 2 3 local tbl = { \"hello\" , \"there\" , \"this\" , \"is\" , \"a\" , \"test\" } TableUtil . FastRemove ( tbl , 2 ) -- Remove \"there\" in the array print ( table.concat ( tbl , \" \" )) -- > hello test this is a Warning The order of the table is not preserved using this function. Do not use this if the ordering of your table needs to be maintained. FastRemoveFirstValue(Table tbl, Variant value) \u00b6 Performs the FastRemove operation on the first index that contains value . 1 2 3 local tbl = { \"hello\" , \"there\" , \"this\" , \"is\" , \"a\" , \"test\" } TableUtil . FastRemoveFirstValue ( tbl , \"there\" ) -- Remove \"there\" in the array print ( table.concat ( tbl , \" \" )) -- > hello test this is a Map(Table tbl, Function callback) \u00b6 Constructs a new table by populating it with the results of calling a function on every item in the tbl table. Useful for restructuring an existing table. 1 2 3 4 5 6 7 8 9 10 11 local peopleData = { { firstName = \"Bob\" ; lastName = \"Smith\" }; { firstName = \"John\" ; lastName = \"Doe\" }; { firstName = \"Jane\" ; lastName = \"Doe\" }; } local people = TableUtil . Map ( peopleData , function ( item ) return { Name = item . firstName .. \" \" .. item . lastName } end ) -- 'people' is now an array that looks like: { {Name = \"Bob Smith\"}; ... } Filter(Table tbl, Function callback) \u00b6 Constructs a new table based on tbl where it will only include items allowed by the callback function. Each item in the tbl table are passed to the callback. 1 2 3 4 5 6 7 8 9 local people = { { Name = \"Bob Smith\" ; Age = 42 }; { Name = \"John Doe\" ; Age = 34 }; { Name = \"Jane Doe\" ; Age = 37 }; } local peopleUnderForty = TableUtil . Filter ( people , function ( item ) return item . Age < 40 end ) Reduce(Table tbl, Function callback) \u00b6 Reduces the tbl table to a single number. This is useful for tasks such as summing up a table's values. Each item is passed to the callback, as well as an accumulator. 1 2 3 4 5 local tbl = { 40 , 32 , 9 , 5 , 44 } local tblSum = TableUtil . Reduce ( tbl , function ( accumulator , value ) return accumulator + value end ) print ( tblSum ) -- > 130 Assign(Table target, Table sources...) \u00b6 Allows the assigning of values from multiple tables into one. The Assign function is similar to JavaScript's Object.Assign() function and is useful for things such as composition-designed systems. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 local function Driver () return { Drive = function ( self ) self . Speed = 10 end ; } end local function Teleporter () return { Teleport = function ( self , pos ) self . Position = pos end ; } end local function CreateCar () local state = { Speed = 0 ; Position = Vector3 . new (); } -- Assign the Driver and Teleporter components to the car: return TableUtil . Assign ({}, Driver (), Teleporter ()) end local car = CreateCar () car : Drive () car : Teleport ( Vector3 . new ( 0 , 10 , 0 )) IndexOf(Table tbl, Variant item [, Number start]) \u00b6 Returns the index of the given item in the table. If no item is found, this will return nil . Optionally, a start index can be provided. 1 2 3 4 5 local tbl = { \"Hello\" , 32 , true , \"abc\" } local abcIndex = TableUtil . IndexOf ( tbl , \"abc\" ) -- > 4 local helloIndex = TableUtil . IndexOf ( tbl , \"Hello\" ) -- > 1 local helloIndex = TableUtil . IndexOf ( tbl , \"Hello\" , 3 ) -- > nil local numberIndex = TableUtil . IndexOf ( tbl , 64 ) -- > nil Note table.find does the exact same operation, but was introduced after this method was written. For backwards compatibility, this method will continue to exist, but simply points to the table.find function instead. Reverse(Table tbl) \u00b6 Creates a reversed version of the table. 1 2 local tbl = { 2 , 4 , 6 , 8 } local rblReversed = TableUtil . Reverse ( tbl ) -- > {8, 6, 4, 2} Warning This is a shallow copy. Shuffle(Table tbl) \u00b6 Shuffles the array. Internally, this is using the Fisher-Yates algorithm to shuffle around the items. 1 2 3 local tbl = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } TableUtil . Shuffle ( tbl ) print ( table.concat ( tbl , \", \" )) -- e.g. > 3, 6, 9, 2, 8, 4, 1, 7, 5 Warning This mutates the table. IsEmpty(Table tbl) \u00b6 Returns true if the table is empty. 1 2 3 4 5 6 local t1 = {} local t2 = { \"Hello\" } local t3 = { X = 32 } print ( TableUtil . IsEmpty ( t1 )) --> true print ( TableUtil . IsEmpty ( t2 )) --> false print ( TableUtil . IsEmpty ( t3 )) --> false EncodeJSON(Table tbl) \u00b6 Shortcut for HttpService:JSONEncode() 1 2 3 local plrData = { Points = 32 ; Cash = 100 ; Balloons = 540 } local plrDataJson = TableUtil . EncodeJSON ( plrData ) print ( plrDataJson ) --> {\"Points\": 32, \"Cash\": 100, \"Balloons\": 540} DecodeJSON(String json) \u00b6 Shortcut for HttpService:JSONDecode() 1 2 3 4 5 local plrDataJson = \"{ \\\" Points \\\" : 32, \\\" Cash \\\" : 100, \\\" Balloons \\\" : 540}\" local plrData = TableUtil . DecodeJSON ( plrDataJson ) print ( \"Points\" , plrData . Points ) print ( \"Cash\" , plrData . Cash ) print ( \"Balloons\" , plrData . Balloons )","title":"TableUtil"},{"location":"module_docs/shared/table_util/#copytable-tbl","text":"Creates and returns a deep copy of the given table. 1 2 local tbl = { \"a\" , \"b\" , \"c\" , { \"x\" , \"y\" , \"z\" }} local tblCopy = TableUtil . Copy ( tbl )","title":"Copy(Table tbl)"},{"location":"module_docs/shared/table_util/#copyshallowtable-tbl","text":"Creates and returns a shallow copy of the given table. 1 2 local tbl = { \"a\" , \"b\" , \"c\" } local tblCopy = TableUtil . Copy ( tbl )","title":"CopyShallow(Table tbl)"},{"location":"module_docs/shared/table_util/#synctable-tbl-table-templatetbl","text":"Synchronizes a table to the template table. If the table does not have an item that exists within the template, it gets added. If the table has something that the template doesn't have, it gets removed. 1 2 3 4 local tbl1 = { kills = 0 ; deaths = 0 ; points = 0 } local tbl2 = { points = 0 } TableUtil . Sync ( tbl2 , tbl1 ) -- Synchronize table2 to table1 print ( tbl2 . deaths )","title":"Sync(Table tbl, Table templateTbl)"},{"location":"module_docs/shared/table_util/#printtable-tbl-string-label-boolean-deepprint","text":"Prints the table to the output. This is useful for debugging tables. 1 2 local tbl = { a = 32 ; b = 64 ; c = 128 ; d = { x = 0 ; y = 1 ; z = 2 }} TableUtil . Print ( tbl , \"My Table\" , true ) Warning This method does not detect cyclical tables. Passing a cyclical table will result in a stackoverflow.","title":"Print(Table tbl, String label, Boolean deepPrint)"},{"location":"module_docs/shared/table_util/#fastremovetable-tbl-number-index","text":"Removes an item at index in the table tbl . Instead of using table.remove , this simply grabs the last item in the table and places it at the given index and trims off the last item. This is significantly faster than table.remove because it runs in O(1) , whereas table.remove is O(N) . 1 2 3 local tbl = { \"hello\" , \"there\" , \"this\" , \"is\" , \"a\" , \"test\" } TableUtil . FastRemove ( tbl , 2 ) -- Remove \"there\" in the array print ( table.concat ( tbl , \" \" )) -- > hello test this is a Warning The order of the table is not preserved using this function. Do not use this if the ordering of your table needs to be maintained.","title":"FastRemove(Table tbl, Number index)"},{"location":"module_docs/shared/table_util/#fastremovefirstvaluetable-tbl-variant-value","text":"Performs the FastRemove operation on the first index that contains value . 1 2 3 local tbl = { \"hello\" , \"there\" , \"this\" , \"is\" , \"a\" , \"test\" } TableUtil . FastRemoveFirstValue ( tbl , \"there\" ) -- Remove \"there\" in the array print ( table.concat ( tbl , \" \" )) -- > hello test this is a","title":"FastRemoveFirstValue(Table tbl, Variant value)"},{"location":"module_docs/shared/table_util/#maptable-tbl-function-callback","text":"Constructs a new table by populating it with the results of calling a function on every item in the tbl table. Useful for restructuring an existing table. 1 2 3 4 5 6 7 8 9 10 11 local peopleData = { { firstName = \"Bob\" ; lastName = \"Smith\" }; { firstName = \"John\" ; lastName = \"Doe\" }; { firstName = \"Jane\" ; lastName = \"Doe\" }; } local people = TableUtil . Map ( peopleData , function ( item ) return { Name = item . firstName .. \" \" .. item . lastName } end ) -- 'people' is now an array that looks like: { {Name = \"Bob Smith\"}; ... }","title":"Map(Table tbl, Function callback)"},{"location":"module_docs/shared/table_util/#filtertable-tbl-function-callback","text":"Constructs a new table based on tbl where it will only include items allowed by the callback function. Each item in the tbl table are passed to the callback. 1 2 3 4 5 6 7 8 9 local people = { { Name = \"Bob Smith\" ; Age = 42 }; { Name = \"John Doe\" ; Age = 34 }; { Name = \"Jane Doe\" ; Age = 37 }; } local peopleUnderForty = TableUtil . Filter ( people , function ( item ) return item . Age < 40 end )","title":"Filter(Table tbl, Function callback)"},{"location":"module_docs/shared/table_util/#reducetable-tbl-function-callback","text":"Reduces the tbl table to a single number. This is useful for tasks such as summing up a table's values. Each item is passed to the callback, as well as an accumulator. 1 2 3 4 5 local tbl = { 40 , 32 , 9 , 5 , 44 } local tblSum = TableUtil . Reduce ( tbl , function ( accumulator , value ) return accumulator + value end ) print ( tblSum ) -- > 130","title":"Reduce(Table tbl, Function callback)"},{"location":"module_docs/shared/table_util/#assigntable-target-table-sources","text":"Allows the assigning of values from multiple tables into one. The Assign function is similar to JavaScript's Object.Assign() function and is useful for things such as composition-designed systems. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 local function Driver () return { Drive = function ( self ) self . Speed = 10 end ; } end local function Teleporter () return { Teleport = function ( self , pos ) self . Position = pos end ; } end local function CreateCar () local state = { Speed = 0 ; Position = Vector3 . new (); } -- Assign the Driver and Teleporter components to the car: return TableUtil . Assign ({}, Driver (), Teleporter ()) end local car = CreateCar () car : Drive () car : Teleport ( Vector3 . new ( 0 , 10 , 0 ))","title":"Assign(Table target, Table sources...)"},{"location":"module_docs/shared/table_util/#indexoftable-tbl-variant-item-number-start","text":"Returns the index of the given item in the table. If no item is found, this will return nil . Optionally, a start index can be provided. 1 2 3 4 5 local tbl = { \"Hello\" , 32 , true , \"abc\" } local abcIndex = TableUtil . IndexOf ( tbl , \"abc\" ) -- > 4 local helloIndex = TableUtil . IndexOf ( tbl , \"Hello\" ) -- > 1 local helloIndex = TableUtil . IndexOf ( tbl , \"Hello\" , 3 ) -- > nil local numberIndex = TableUtil . IndexOf ( tbl , 64 ) -- > nil Note table.find does the exact same operation, but was introduced after this method was written. For backwards compatibility, this method will continue to exist, but simply points to the table.find function instead.","title":"IndexOf(Table tbl, Variant item [, Number start])"},{"location":"module_docs/shared/table_util/#reversetable-tbl","text":"Creates a reversed version of the table. 1 2 local tbl = { 2 , 4 , 6 , 8 } local rblReversed = TableUtil . Reverse ( tbl ) -- > {8, 6, 4, 2} Warning This is a shallow copy.","title":"Reverse(Table tbl)"},{"location":"module_docs/shared/table_util/#shuffletable-tbl","text":"Shuffles the array. Internally, this is using the Fisher-Yates algorithm to shuffle around the items. 1 2 3 local tbl = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } TableUtil . Shuffle ( tbl ) print ( table.concat ( tbl , \", \" )) -- e.g. > 3, 6, 9, 2, 8, 4, 1, 7, 5 Warning This mutates the table.","title":"Shuffle(Table tbl)"},{"location":"module_docs/shared/table_util/#isemptytable-tbl","text":"Returns true if the table is empty. 1 2 3 4 5 6 local t1 = {} local t2 = { \"Hello\" } local t3 = { X = 32 } print ( TableUtil . IsEmpty ( t1 )) --> true print ( TableUtil . IsEmpty ( t2 )) --> false print ( TableUtil . IsEmpty ( t3 )) --> false","title":"IsEmpty(Table tbl)"},{"location":"module_docs/shared/table_util/#encodejsontable-tbl","text":"Shortcut for HttpService:JSONEncode() 1 2 3 local plrData = { Points = 32 ; Cash = 100 ; Balloons = 540 } local plrDataJson = TableUtil . EncodeJSON ( plrData ) print ( plrDataJson ) --> {\"Points\": 32, \"Cash\": 100, \"Balloons\": 540}","title":"EncodeJSON(Table tbl)"},{"location":"module_docs/shared/table_util/#decodejsonstring-json","text":"Shortcut for HttpService:JSONDecode() 1 2 3 4 5 local plrDataJson = \"{ \\\" Points \\\" : 32, \\\" Cash \\\" : 100, \\\" Balloons \\\" : 540}\" local plrData = TableUtil . DecodeJSON ( plrDataJson ) print ( \"Points\" , plrData . Points ) print ( \"Cash\" , plrData . Cash ) print ( \"Balloons\" , plrData . Balloons )","title":"DecodeJSON(String json)"},{"location":"module_docs/shared/thread/","text":"The Thread module allows an alternative to the built-in globals spawn and delay . The built-in globals are known to throttle unexpectedly. The Thread module will provide the expected behavior for spawning and delayed spawning of new threads. Please note that the Lua runtime is single-threaded, and any multi-threading applications are simply utilizing the underlying task scheduler to appear multi-threaded. Thread.SpawnNow(Function func [, Variant args...]) \u00b6 Spawns the given function on a new thread immediately. Internally, this is done by creating, firing, and destroying a BindableEvent. Due to this process, SpawnNow is not necessarily a well-performing operation, and thus should not be used when performance needs to be optimal. 1 2 3 Thread . SpawnNow ( function () print ( \"Hello from SpawnNow\" ) end ) Thread.Spawn(Function func, [, Variant args...]) \u00b6 Spawns the given function on a new thread. Internally, this is done using RunService's Heartbeat event, which means that the function will be spawned on the next heartbeat step (i.e. next frame). 1 2 3 Thread . Spawn ( function () print ( \"Hello from Spawn\" ) end ) Thread.Delay(Number waitTime, Function func [, Variant args...]) \u00b6 Spawns the given function on a new thread after waitTime has elapsed. Internally, this is the same as the above Thread.Spawn function, except for the delayed start. Because this function returns the heartbeat connection, the delay can be cancelled by disconnecting the connection. Returns: Connection 1 2 3 4 5 6 7 8 9 10 11 -- Spawn function after 3 seconds: Thread . Delay ( 3 , function () print ( \"Hello from delay\" ) end ) -- Attempt to spawn after 5 seconds, but cancel it after 1 second: local delayCon = Thread . Delay ( 5 , function () print ( \"This will never print\" ) end ) wait ( 1 ) delayCon : Disconnect () Thread.DelayRepeat(Number tm, Function func [, Variant args...]) \u00b6 Continuously calls func after tm seconds on a new thread. 1 2 3 4 5 6 local inc = 0 Thread . DelayRepeat ( 3 , function () inc = inc + 1 print ( inc ) end )","title":"Thread"},{"location":"module_docs/shared/thread/#threadspawnnowfunction-func-variant-args","text":"Spawns the given function on a new thread immediately. Internally, this is done by creating, firing, and destroying a BindableEvent. Due to this process, SpawnNow is not necessarily a well-performing operation, and thus should not be used when performance needs to be optimal. 1 2 3 Thread . SpawnNow ( function () print ( \"Hello from SpawnNow\" ) end )","title":"Thread.SpawnNow(Function func [, Variant args...])"},{"location":"module_docs/shared/thread/#threadspawnfunction-func-variant-args","text":"Spawns the given function on a new thread. Internally, this is done using RunService's Heartbeat event, which means that the function will be spawned on the next heartbeat step (i.e. next frame). 1 2 3 Thread . Spawn ( function () print ( \"Hello from Spawn\" ) end )","title":"Thread.Spawn(Function func, [, Variant args...])"},{"location":"module_docs/shared/thread/#threaddelaynumber-waittime-function-func-variant-args","text":"Spawns the given function on a new thread after waitTime has elapsed. Internally, this is the same as the above Thread.Spawn function, except for the delayed start. Because this function returns the heartbeat connection, the delay can be cancelled by disconnecting the connection. Returns: Connection 1 2 3 4 5 6 7 8 9 10 11 -- Spawn function after 3 seconds: Thread . Delay ( 3 , function () print ( \"Hello from delay\" ) end ) -- Attempt to spawn after 5 seconds, but cancel it after 1 second: local delayCon = Thread . Delay ( 5 , function () print ( \"This will never print\" ) end ) wait ( 1 ) delayCon : Disconnect ()","title":"Thread.Delay(Number waitTime, Function func [, Variant args...])"},{"location":"module_docs/shared/thread/#threaddelayrepeatnumber-tm-function-func-variant-args","text":"Continuously calls func after tm seconds on a new thread. 1 2 3 4 5 6 local inc = 0 Thread . DelayRepeat ( 3 , function () inc = inc + 1 print ( inc ) end )","title":"Thread.DelayRepeat(Number tm, Function func [, Variant args...])"},{"location":"module_docs/shared/vector_util/","text":"The VectorUtil module provides utility functions for Roblox vectors. ClampMagnitude(vector, maxMagnitude) \u00b6 Clamps the magnitude of a vector so it is only a certain length. 1 2 VectorUtil . ClampMagnitude ( Vector3 . new ( 100 , 0 , 0 ), 15 ) == Vector3 . new ( 15 , 0 , 0 ) VectorUtil . ClampMagnitude ( Vector3 . new ( 10 , 0 , 0 ), 20 ) == Vector3 . new ( 10 , 0 , 0 ) AngleBetween(vector1, vector2) \u00b6 Finds the angle (in radians) between two vectors. 1 2 3 local v1 = Vector3 . new ( 10 , 0 , 0 ) local v2 = Vector3 . new ( 0 , 10 , 0 ) AngleBetween ( v1 , v2 ) == math.rad ( 90 ) AngleBetweenSigned(vector1, vector2, axisVector) \u00b6 Finds the signed angle (in radians) between two vectors around the given axis vector. 1 2 3 4 local v1 = Vector3 . new ( 10 , 0 , 0 ) local v2 = Vector3 . new ( 0 , 0 , - 10 ) local axis = Vector3 . new ( 0 , 1 , 0 ) AngleBetweenSigned ( v1 , v2 , axis ) == math.rad ( 90 )","title":"VectorUtil"},{"location":"module_docs/shared/vector_util/#clampmagnitudevector-maxmagnitude","text":"Clamps the magnitude of a vector so it is only a certain length. 1 2 VectorUtil . ClampMagnitude ( Vector3 . new ( 100 , 0 , 0 ), 15 ) == Vector3 . new ( 15 , 0 , 0 ) VectorUtil . ClampMagnitude ( Vector3 . new ( 10 , 0 , 0 ), 20 ) == Vector3 . new ( 10 , 0 , 0 )","title":"ClampMagnitude(vector, maxMagnitude)"},{"location":"module_docs/shared/vector_util/#anglebetweenvector1-vector2","text":"Finds the angle (in radians) between two vectors. 1 2 3 local v1 = Vector3 . new ( 10 , 0 , 0 ) local v2 = Vector3 . new ( 0 , 10 , 0 ) AngleBetween ( v1 , v2 ) == math.rad ( 90 )","title":"AngleBetween(vector1, vector2)"},{"location":"module_docs/shared/vector_util/#anglebetweensignedvector1-vector2-axisvector","text":"Finds the signed angle (in radians) between two vectors around the given axis vector. 1 2 3 4 local v1 = Vector3 . new ( 10 , 0 , 0 ) local v2 = Vector3 . new ( 0 , 0 , - 10 ) local axis = Vector3 . new ( 0 , 1 , 0 ) AngleBetweenSigned ( v1 , v2 , axis ) == math.rad ( 90 )","title":"AngleBetweenSigned(vector1, vector2, axisVector)"}]}